name: Deploy to Production

concurrency:
  group: prod-deploy
  cancel-in-progress: true

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY}}



      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install NPM deps & build docs
        run: |
          npm ci --silent
          npm run docs:build

      - name: Deploy via SSH (appleboy)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 89.111.153.146
          username: root
          key: ${{ secrets.DEPLOY }}
          script: |
            cd /var/www/prohelper
            git reset --hard HEAD
            git clean -fd -e public/docs -e public/docs/**
            git fetch origin
            git reset --hard origin/main
            php artisan down || true
            composer install --no-interaction --prefer-dist --optimize-autoloader
            if [ ! -f /usr/local/bin/rr ]; then vendor/bin/rr get-binary --location=/usr/local/bin --no-config --stability=stable; fi
            php artisan migrate --force
            php artisan route:cache
            php artisan config:cache
            php artisan view:cache
            php artisan up || true
            php artisan octane:reload || sudo systemctl reload prohelper-octane || sudo systemctl restart prohelper-octane

      - name: Copy docs to server (appleboy)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: 89.111.153.146
          username: root
          key: ${{ secrets.DEPLOY }}
          source: public/docs
          target: /var/www/prohelper/public/

      - name: Setup Monitoring (appleboy)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 89.111.153.146
          username: root
          key: ${{ secrets.DEPLOY }}
          script: |
            cd /var/www/prohelper
            mkdir -p storage/logs/{api,telemetry}
            chmod -R 777 storage/logs/
            if ! docker ps | grep -q prometheus; then
              echo 'Starting monitoring stack...'
              chmod +x start-monitoring.sh
              ./start-monitoring.sh
            else
              echo 'Monitoring stack already running, restarting services...'
              (command -v docker-compose >/dev/null && docker-compose restart prometheus grafana || docker compose restart prometheus grafana)
            fi

      - name: Health Check (appleboy)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 89.111.153.146
          username: root
          key: ${{ secrets.DEPLOY }}
        
          script: |
            cd /var/www/prohelper
            sleep 30
            (curl -fsS http://localhost/up || curl -kfsS https://localhost/up || echo 'App health check failed')
            curl -fsS http://localhost:9090/-/healthy || echo 'Prometheus health check failed'
            curl -fsS http://localhost:3000/api/health || echo 'Grafana health check failed'
            curl -fsS http://localhost:3100/ready || echo 'Loki health check failed'
            (curl -fsS http://localhost/metrics || curl -kfsS https://localhost/metrics || echo 'Metrics endpoint check failed')

      - name: Update Monitoring Configuration
        run: |
          ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no root@89.111.153.146 "\
            cd /var/www/prohelper && \
            # Rolling restart monitoring stack (no full down)
            chmod +x start-monitoring.sh stop-monitoring.sh && \
            mkdir -p /var/lock && \
            flock -n /var/lock/prohelper-monitoring.lock -c '\\
              # Предварительно остановим/удалим promtail, чтобы избежать race на recreate\\
              (docker ps -aq --filter name=^promtail$ | xargs -r docker stop) || true && \\
              docker rm -f promtail 2>/dev/null || true && \\
              if command -v docker-compose >/dev/null; then \\
                docker-compose up -d --remove-orphans --force-recreate prometheus grafana loki promtail node-exporter; \\
              else \\
                docker compose up -d --remove-orphans --force-recreate prometheus grafana loki promtail node-exporter; \\
              fi'"

      - name: Notify Monitoring
        if: always()
        run: |
          ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no root@89.111.153.146 "\
            cd /var/www/prohelper && \
            # Send deployment notification to monitoring
            curl -X POST http://localhost:9090/api/v1/admin/tsdb/snapshot || true && \
            # Log deployment event
            echo '{\"timestamp\":\"$(date -Iseconds)\",\"event\":\"deployment\",\"version\":\"${{ github.sha }}\",\"branch\":\"${{ github.ref_name }}\"}' >> storage/logs/api/deployment.log"