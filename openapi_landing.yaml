openapi: 3.0.3
info:
  title: ProHelper Landing/Main API
  description: API for the main ProHelper application/landing page, handling user registration, authentication, profile management, organizations, and support requests.
  version: 1.0.0
servers:
  - url: /api/v1/landing # Base URL, routes now correctly defined
    description: Main Landing API server
tags:
  - name: Landing Auth
    description: User authentication, registration, password reset, email verification
  - name: Landing Users
    description: Current user profile management
  - name: Landing Organizations
    description: Organization creation and management (initial setup)
  - name: Landing Support
    description: Handling support requests
paths:
  # ========== Auth Routes (auth.php) ==========
  /auth/register:
    post:
      tags:
        - Landing Auth
      summary: User Registration
      description: Registers a new user account with organization.
      operationId: landingRegister
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User and organization registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Регистрация успешна"
                  user:
                    $ref: '#/components/schemas/LandingUser'
                  organization:
                    $ref: '#/components/schemas/Organization'
                  token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Landing Auth
      summary: User Login
      description: Authenticates a user for the main application and returns a JWT token (using `api_landing` guard).
      operationId: landingLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Вход выполнен успешно"
                  token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                  user:
                     $ref: '#/components/schemas/LandingUser'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      tags:
        - Landing Auth
      summary: User Logout
      description: Invalidates the current user's JWT token (`api_landing`).
      operationId: landingLogout
      security:
        - bearerAuthLanding: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Выход выполнен успешно"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/me:
    get:
      tags:
        - Landing Auth
      summary: Get Current User Info
      description: Gets information about currently authenticated user.
      operationId: landingMeInfo
      security:
        - bearerAuthLanding: []
      responses:
        '200':
          description: User profile information
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/LandingUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      tags:
        - Landing Auth
      summary: Refresh Token
      description: Refreshes the JWT token for continued authentication.
      operationId: landingRefreshToken
      security:
        - bearerAuthLanding: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/password/email:
    post:
      tags:
        - Landing Auth
      summary: Request Password Reset Link
      description: Sends a password reset link to the user's email address.
      operationId: landingRequestPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
      responses:
        '200':
          description: Password reset link sent (if email exists)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "На ваш email отправлена ссылка для сброса пароля."
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/password/reset:
    post:
      tags:
        - Landing Auth
      summary: Reset Password
      description: Resets the user's password using the token from the reset link.
      operationId: landingResetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - email
                - password
                - password_confirmation
              properties:
                token:
                  type: string
                  description: The password reset token.
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: "newsecretpassword"
                password_confirmation:
                  type: string
                  format: password
                  example: "newsecretpassword"
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Пароль успешно сброшен."
        '422':
          description: Validation error (e.g., invalid token, email mismatch, weak password)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorValidation'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/email/verify/{id}/{hash}: # Assuming verification route structure
    get:
      tags:
        - Landing Auth
      summary: Verify Email Address
      description: Verifies the user's email address using the link sent during registration.
      operationId: landingVerifyEmail
      parameters:
        - name: id
          in: path
          required: true
          description: User ID.
          schema:
            type: integer
        - name: hash
          in: path
          required: true
          description: Verification hash.
          schema:
            type: string
      responses:
        '200': # Or redirect
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email успешно подтвержден."
        '401': # Invalid hash/id or already verified
          $ref: '#/components/responses/Unauthorized'
        '403': # Might be used if signature is invalid/expired
           $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/email/resend: # Assuming resend verification email route exists
    post:
      tags:
        - Landing Auth
      summary: Resend Verification Email
      description: Resends the email verification link to the currently authenticated user.
      operationId: landingResendVerificationEmail
      security:
        - bearerAuthLanding: []
      responses:
        '200':
          description: Verification link sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ссылка для верификации отправлена."
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409': # Conflict - Email already verified
           description: Email already verified
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/ErrorConflict' # Custom or generic conflict error
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ========== User Profile Routes (users.php) ==========
  /user/profile:
    get:
      tags:
        - Landing Users
      summary: Get User Profile
      description: Retrieves the profile information of the currently authenticated user.
      operationId: landingGetUserProfile
      security:
        - bearerAuthLanding: []
      responses:
        '200':
          description: Current user profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Landing Users
      summary: Update User Profile
      description: Updates the profile information of the currently authenticated user.
      operationId: landingUpdateUserProfile
      security:
        - bearerAuthLanding: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/password:
    put:
      tags:
        - Landing Users
      summary: Change User Password
      description: Changes the password for the currently authenticated user.
      operationId: landingChangePassword
      security:
        - bearerAuthLanding: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Пароль успешно изменен."
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          description: Validation Error (e.g., current password incorrect, new password weak)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorValidation'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/organizations: # Assuming endpoint to list user's organizations
    get:
      tags:
        - Landing Users
        - Landing Organizations
      summary: List User Organizations
      description: Retrieves a list of organizations the current user belongs to.
      operationId: landingGetUserOrganizations
      security:
        - bearerAuthLanding: []
      responses:
        '200':
          description: List of user organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationSummary' # Simplified organization view
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ========== Organization Routes (organization.php) ==========
  /organization: # Исправленный путь в соответствии с реализацией
    get:
      tags:
        - Landing Organizations
      summary: Get Current Organization Details
      description: Retrieves details of the current organization the user has access to manage.
      operationId: landingGetCurrentOrganization
      security:
        - bearerAuthLanding: []
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden' # If user cannot manage this org
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch: # Исправлено с PUT на PATCH в соответствии с реализацией
      tags:
        - Landing Organizations
      summary: Update Organization
      description: Updates details of the current organization the user manages.
      operationId: landingUpdateCurrentOrganization
      security:
        - bearerAuthLanding: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ========== Support Routes (support.php) ==========
  /support: # Исправленный путь в соответствии с реализацией
    post:
      tags:
        - Landing Support
      summary: Submit Support Request
      description: Submits a support request or feedback form. May or may not require authentication.
      operationId: landingSubmitSupportRequest
      security:
        - bearerAuthLanding: [] # Добавлена аутентификация, т.к. в коде есть middleware
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportRequest'
      responses:
        '200': # Or 202 Accepted
          description: Support request submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ваш запрос в поддержку отправлен."
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ========== User Management Routes (users.php) ==========
  /users:
    get:
      tags:
        - Landing Users
      summary: List Organization Admins
      description: Retrieves a list of admin users for the current organization.
      operationId: landingListAdmins
      security:
        - bearerAuthLanding: []
      responses:
        '200':
          description: List of admin users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Landing Users
      summary: Create Organization Admin
      description: Creates a new admin user for the current organization.
      operationId: landingCreateAdmin
      security:
        - bearerAuthLanding: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreAdminRequest'
      responses:
        '201':
          description: Admin user created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{user}:
    get:
      tags:
        - Landing Users
      summary: Get Organization Admin
      description: Retrieves details of a specific admin user.
      operationId: landingGetAdmin
      security:
        - bearerAuthLanding: []
      parameters:
        - name: user
          in: path
          required: true
          description: ID of the admin user.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Admin user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Landing Users
      summary: Update Organization Admin
      description: Updates details of a specific admin user.
      operationId: landingUpdateAdmin
      security:
        - bearerAuthLanding: []
      parameters:
        - name: user
          in: path
          required: true
          description: ID of the admin user.
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAdminRequest'
      responses:
        '200':
          description: Admin user updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Landing Users
      summary: Delete Organization Admin
      description: Removes an admin user from the organization.
      operationId: landingDeleteAdmin
      security:
        - bearerAuthLanding: []
      parameters:
        - name: user
          in: path
          required: true
          description: ID of the admin user.
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Admin user deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ========== Admin Panel User Management Routes (adminPanelUsers.php) ==========
  /adminPanelUsers:
    get:
      tags:
        - Landing Users
      summary: List Admin Panel Users
      description: Retrieves a list of admin panel users (web_admin, accountant, etc.) for the current organization.
      operationId: landingListAdminPanelUsers
      security:
        - bearerAuthLanding: []
      responses:
        '200':
          description: List of admin panel users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminPanelUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Landing Users
      summary: Create Admin Panel User
      description: Creates a new admin panel user (web_admin, accountant, etc.) for the current organization.
      operationId: landingCreateAdminPanelUser
      security:
        - bearerAuthLanding: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreAdminPanelUserRequest'
      responses:
        '201':
          description: Admin panel user created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminPanelUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /adminPanelUsers/{user}:
    get:
      tags:
        - Landing Users
      summary: Get Admin Panel User
      description: Retrieves details of a specific admin panel user.
      operationId: landingGetAdminPanelUser
      security:
        - bearerAuthLanding: []
      parameters:
        - name: user
          in: path
          required: true
          description: ID of the admin panel user.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Admin panel user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminPanelUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Landing Users
      summary: Update Admin Panel User
      description: Updates details of a specific admin panel user.
      operationId: landingUpdateAdminPanelUser
      security:
        - bearerAuthLanding: []
      parameters:
        - name: user
          in: path
          required: true
          description: ID of the admin panel user.
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAdminPanelUserRequest'
      responses:
        '200':
          description: Admin panel user updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminPanelUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Landing Users
      summary: Delete Admin Panel User
      description: Removes an admin panel user from the organization.
      operationId: landingDeleteAdminPanelUser
      security:
        - bearerAuthLanding: []
      parameters:
        - name: user
          in: path
          required: true
          description: ID of the admin panel user.
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Admin panel user deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

# ================= Component Definitions =================
components:
  securitySchemes:
    bearerAuthLanding:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Landing/Main App JWT token obtained from `/auth/login` endpoint. Example: `Bearer {token}`"

  # ========== Reusable Responses (Can also reference admin/mobile) ==========
  responses:
    Unauthorized:
      description: Unauthorized / Unauthenticated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorUnauthorized'
    Forbidden:
      description: Forbidden (Insufficient permissions)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorForbidden'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorNotFound'
    ValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorValidation'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorServer'
    Conflict:
       description: Conflict (e.g., resource already exists or state prevents action)
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/ErrorConflict'

  # ========== Schemas (Requests, Responses, Models) ==========
  schemas:
    # --- Auth Schemas ---
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
        - password_confirmation
        - organization_name
      properties:
        name:
          type: string
          example: "Иван Иванов"
        email:
          type: string
          format: email
          example: "ivan.ivanov@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "секретныйпароль"
        password_confirmation:
          type: string
          format: password
          example: "секретныйпароль"
        organization_name:
           type: string
           example: "ООО Строитель"
        # Опциональные поля для организации
        organization_legal_name:
          type: string
          nullable: true
          example: "Общество с ограниченной ответственностью Строитель"
        organization_tax_number:
          type: string
          nullable: true
          example: "7712345678"
        organization_registration_number:
          type: string
          nullable: true
          example: "1234567890123"
        organization_phone:
          type: string
          nullable: true
          example: "+7 (999) 123-45-67"
        organization_email:
          type: string
          format: email
          nullable: true
          example: "info@stroitel.ru"
        organization_address:
          type: string
          nullable: true
          example: "г. Москва, ул. Строителей, д. 1"
        organization_city:
          type: string
          nullable: true
          example: "Москва"
        organization_postal_code:
          type: string
          nullable: true
          example: "123456"
        organization_country:
          type: string
          nullable: true
          example: "Россия"

    LoginRequest:
       type: object
       required:
        - email
        - password
       properties:
        email:
          type: string
          format: email
          example: "ivan.ivanov@example.com"
        password:
          type: string
          format: password
          example: "секретныйпароль"

    # --- User Schemas ---
    LandingUser: # Resource for the authenticated user in the landing app
      type: object
      properties:
        id:
          type: integer
          example: 10
        name:
          type: string
          example: "Иван Иванов"
        email:
          type: string
          format: email
          example: "ivan.ivanov@example.com"
        email_verified_at:
          type: string
          format: date-time
          nullable: true
        created_at:
           type: string
           format: date-time
        updated_at:
           type: string
           format: date-time
        current_organization_id: # ID of the org context, if applicable
           type: integer
           nullable: true
           example: 1
        # Add roles or other relevant fields

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          example: "Иван Петрович Иванов"
        email:
          type: string
          format: email
          example: "ivan.p.ivanov@example.com"
        # Other updatable profile fields?

    ChangePasswordRequest:
      type: object
      required:
        - current_password
        - password
        - password_confirmation
      properties:
        current_password:
          type: string
          format: password
          example: "старыйпароль"
        password:
          type: string
          format: password
          minLength: 8
          example: "новыйпароль"
        password_confirmation:
          type: string
          format: password
          example: "новыйпароль"

    # --- Organization Schemas ---
    Organization:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "ООО Строитель"
        legal_name:
          type: string
          nullable: true
          example: "Общество с ограниченной ответственностью Строитель"
        tax_number:
          type: string
          nullable: true
          example: "7712345678"
        registration_number:
          type: string
          nullable: true
          example: "1234567890123"
        phone:
          type: string
          nullable: true
          example: "+7 (999) 123-45-67"
        email:
          type: string
          format: email
          nullable: true
          example: "info@stroitel.ru"
        address:
          type: string
          nullable: true
          example: "г. Москва, ул. Строителей, д. 1"
        city:
          type: string
          nullable: true
          example: "Москва"
        postal_code:
          type: string
          nullable: true
          example: "123456"
        country:
          type: string
          nullable: true
          example: "Россия"
        owner_id:
          type: integer
          example: 10
        created_at:
           type: string
           format: date-time
        updated_at:
           type: string
           format: date-time

    OrganizationSummary: # Simplified view for lists
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "ООО Строитель"
        role_in_org: # User's role in this specific organization
           type: string
           example: "Владелец" # или "Администратор", "Участник"

    StoreOrganizationRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Моя Новая Компания"
        legal_name:
          type: string
          nullable: true
          example: "ООО Моя Новая Компания"
        tax_number:
          type: string
          nullable: true
          example: "7712345678"
        registration_number:
          type: string
          nullable: true
          example: "1234567890123"
        phone:
          type: string
          nullable: true
          example: "+7 (999) 123-45-67"
        email:
          type: string
          format: email
          nullable: true
          example: "info@mynewcompany.ru"
        address:
          type: string
          nullable: true
          example: "г. Москва, ул. Строителей, д. 1"
        city:
          type: string
          nullable: true
          example: "Москва"
        postal_code:
          type: string
          nullable: true
          example: "123456"
        country:
          type: string
          nullable: true
          example: "Россия"

    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
          example: "Обновленное Название Компании"
        legal_name:
          type: string
          nullable: true
          example: "ООО Обновленное Название Компании"
        tax_number:
          type: string
          nullable: true
          example: "7712345678"
        registration_number:
          type: string
          nullable: true
          example: "1234567890123"
        phone:
          type: string
          nullable: true
          example: "+7 (999) 123-45-67"
        email:
          type: string
          format: email
          nullable: true
          example: "new.info@company.ru"
        address:
          type: string
          nullable: true
          example: "г. Москва, ул. Новая, д. 10"
        city:
          type: string
          nullable: true
          example: "Москва"
        postal_code:
          type: string
          nullable: true
          example: "123456"
        country:
          type: string
          nullable: true
          example: "Россия"

    # --- Support Schemas ---
    SupportRequest:
      type: object
      required:
        - subject
        - message
      properties:
        name: # Optional, auto-filled if logged in
          type: string
          example: "Иван Иванов"
        email: # Optional, auto-filled if logged in
          type: string
          format: email
          example: "ivan.ivanov@example.com"
        subject:
          type: string
          example: "Проблема со входом в систему"
        message:
          type: string
          example: "Я не могу войти в свой аккаунт..."
        type: # Optional category
          type: string
          enum: ["Сообщение об ошибке", "Запрос функциональности", "Общий вопрос", "Вопрос по оплате"]
          example: "Общий вопрос"

    # --- Error Schemas ---
    ErrorValidation:
      type: object
      properties:
        message:
          type: string
          example: "Данные не прошли валидацию"
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email: ["Поле email обязательно для заполнения.", "Формат email некорректен."]
            password: ["Пароль должен быть не менее 8 символов."]
    ErrorUnauthorized:
      type: object
      properties:
        message:
          type: string
          example: "Неавторизованный доступ"
    ErrorForbidden:
      type: object
      properties:
        message:
          type: string
          example: "Доступ запрещен"
    ErrorNotFound:
      type: object
      properties:
        message:
          type: string
          example: "Ресурс не найден"
    ErrorServer:
      type: object
      properties:
        message:
          type: string
          example: "Внутренняя ошибка сервера"
    ErrorConflict:
      type: object
      properties:
        message:
          type: string
          example: "Конфликт данных"

    # --- User Management Schemas ---
    AdminUser:
      type: object
      properties:
        id:
          type: integer
          example: 10
        name:
          type: string
          example: "Иван Иванов"
        email:
          type: string
          format: email
          example: "ivan.ivanov@example.com"
        roles:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 2
              name:
                type: string
                example: "Администратор организации"
              slug:
                type: string
                example: "organization_admin"
              description:
                type: string
                example: "Роль администратора организации"
              pivot:
                type: object
                properties:
                  organization_id:
                    type: integer
                    example: 1
                  created_at:
                    type: string
                    format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    AdminPanelUser:
      type: object
      properties:
        id:
          type: integer
          example: 15
        name:
          type: string
          example: "Петр Петров"
        email:
          type: string
          format: email
          example: "petr.petrov@example.com"
        roles:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 4
              name:
                type: string
                example: "Веб-администратор"
              slug:
                type: string
                example: "web_admin"
              description:
                type: string
                example: "Веб-администратор с доступом к админ-панели"
              pivot:
                type: object
                properties:
                  organization_id:
                    type: integer
                    example: 1
                  created_at:
                    type: string
                    format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    StoreAdminRequest:
      type: object
      required:
        - name
        - email
        - password
        - password_confirmation
      properties:
        name:
          type: string
          example: "Иван Иванов"
        email:
          type: string
          format: email
          example: "ivan.ivanov@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "секретныйпароль"
        password_confirmation:
          type: string
          format: password
          example: "секретныйпароль"

    UpdateAdminRequest:
      type: object
      properties:
        name:
          type: string
          example: "Иван Петрович Иванов"
        password:
          type: string
          format: password
          minLength: 8
          example: "новыйпароль"
        password_confirmation:
          type: string
          format: password
          example: "новыйпароль"

    StoreAdminPanelUserRequest:
      type: object
      required:
        - name
        - email
        - password
        - password_confirmation
        - role_slug
      properties:
        name:
          type: string
          example: "Петр Петров"
        email:
          type: string
          format: email
          example: "petr.petrov@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "секретныйпароль"
        password_confirmation:
          type: string
          format: password
          example: "секретныйпароль"
        role_slug:
          type: string
          example: "web_admin"
          description: "Слаг роли пользователя админ-панели (web_admin, accountant, и т.д.)"
          enum: ["web_admin", "accountant"]

    UpdateAdminPanelUserRequest:
      type: object
      properties:
        name:
          type: string
          example: "Петр Иванович Петров"
        password:
          type: string
          format: password
          minLength: 8
          example: "новыйпароль"
        password_confirmation:
          type: string
          format: password
          example: "новыйпароль" 