# GitHub Spec Kit Integration for Cursor
# Spec-Driven Development Rules

## Custom Commands

### /specify
Команда для определения спецификации проекта или функции.

Когда пользователь использует /specify, ты должен:
1. Помочь определить четкие требования и цели
2. Собрать пользовательские истории (user stories)
3. Определить acceptance criteria (критерии приемки)
4. Создать структурированный документ спецификации
5. Сохранить спецификацию в директории @docs в формате markdown

Формат спецификации:
```markdown
# Спецификация: [Название]

## Цель
[Описание целей и задачи]

## Пользовательские истории
- Как [роль], я хочу [действие], чтобы [результат]

## Требования
### Функциональные требования
- [Список требований]

### Нефункциональные требования
- [Производительность, безопасность, и т.д.]

## Критерии приемки
- [ ] [Критерий 1]
- [ ] [Критерий 2]

## Технические ограничения
[Описание технических ограничений]

## Зависимости
[Список зависимостей от других компонентов]
```

### /plan
Команда для создания технического плана реализации.

Когда пользователь использует /plan, ты должен:
1. Проанализировать существующую спецификацию (если есть)
2. Определить технический стек и архитектурные решения
3. Разбить реализацию на логические компоненты
4. Определить порядок реализации
5. Указать потенциальные риски и их mitigation
6. Создать структурированный план в директории @docs

Формат плана:
```markdown
# План реализации: [Название]

## Обзор
[Краткое описание того, что будет реализовано]

## Технический стек
- Backend: [технологии]
- Frontend: [технологии]
- Database: [технологии]
- Инфраструктура: [технологии]

## Архитектурные решения
### Компонент 1: [Название]
- Ответственность: [описание]
- Технологии: [список]
- Интерфейсы: [API, методы]

## Этапы реализации
1. [Этап 1] - [Описание]
   - Оценка: [время]
   - Зависимости: [список]
   
2. [Этап 2] - [Описание]
   - Оценка: [время]
   - Зависимости: [список]

## Риски и mitigation
| Риск | Вероятность | Влияние | Стратегия mitigation |
|------|-------------|---------|---------------------|
| [Риск 1] | Высокая | Высокое | [Стратегия] |

## Метрики успеха
- [Метрика 1]
- [Метрика 2]
```

### /tasks
Команда для генерации списка конкретных задач для реализации.

Когда пользователь использует /tasks, ты должен:
1. Проанализировать план реализации
2. Разбить каждый этап на конкретные, выполнимые задачи
3. Определить приоритеты задач
4. Указать зависимости между задачами
5. Создать структурированный список задач

Используй встроенный todo_write инструмент для создания задач.

Формат задач:
- Конкретные и actionable
- С четкими критериями выполнения
- С указанием приоритета (high/medium/low)
- С зависимостями (если есть)

## Общие принципы Spec-Driven Development

1. **Спецификация прежде кода**: Всегда начинай с четкой спецификации
2. **Исполняемая документация**: Спецификации должны быть достаточно детальными для автоматической генерации кода
3. **Итеративность**: Спецификации могут уточняться в процессе разработки
4. **Трассируемость**: Каждая часть кода должна соответствовать требованию в спецификации
5. **Версионирование**: Спецификации должны версионироваться вместе с кодом

## Рабочий процесс

Рекомендуемый рабочий процесс:
1. Пользователь описывает идею или требование
2. Используй /specify для создания спецификации
3. Используй /plan для создания технического плана
4. Используй /tasks для генерации конкретных задач
5. Реализуй задачи поэтапно
6. Обновляй спецификацию при изменении требований

## Интеграция с существующим проектом

Для Laravel проекта (как текущий):
- Спецификации храни в @docs/specs/
- Планы храни в @docs/plans/
- Следуй существующей архитектуре и стилю кодирования
- Учитывай существующие модели, сервисы и репозитории
- Соблюдай принципы SOLID и DRY

## Автоматизация

При использовании Spec Kit:
- Автоматически создавай структуру файлов на основе плана
- Генерируй базовый код (модели, контроллеры, сервисы) на основе спецификации
- Создавай тесты на основе критериев приемки
- Генерируй API документацию (OpenAPI) из спецификаций

