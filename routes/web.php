<?php

use Illuminate\Support\Facades\Route;

// –†–æ—É—Ç—ã –¥–ª—è —Ö–æ–ª–¥–∏–Ω–≥–æ–≤—ã—Ö –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤ (–∏—Å–∫–ª—é—á–∞—è —Å–ª—É–∂–µ–±–Ω—ã–µ)
Route::domain('{holding}.' . config('app.domain', 'prohelper.pro'))
    ->middleware(['holding.subdomain'])
    ->where(['holding' => '^(?!www|lk|api|admin|mail|ftp).*$'])
    ->group(function () {
        require __DIR__ . '/holding.php';
    });

Route::get('/', function () {
    return view('welcome');
});

Route::get('/login', function () {
    return response()->json(['message' => 'Please use API endpoints for authentication'], 401);
})->name('login');


Route::get('/metrics', [App\Http\Controllers\MetricsController::class, 'metrics']);

Route::get('/docs', function () {
    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API
    $apis = [
        'lk' => [
            'title' => 'ProHelper LK API',
            'description' => 'API –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –º–æ–¥—É–ª—è–º–∏ –∏ –±–∏–ª–ª–∏–Ω–≥–æ–º.',
            'version' => '1.0.0',
            'baseUrl' => '/api/v1/landing',
            'icon' => 'üè¢',
            'status' => 'stable'
        ],
        'admin' => [
            'title' => 'ProHelper Admin API',
            'description' => '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ API. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏, –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º–∏, –æ—Ç—á–µ—Ç–∞–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.',
            'version' => '1.0.0',
            'baseUrl' => '/api/v1/admin',
            'icon' => '‚öôÔ∏è',
            'status' => 'stable'
        ],
        'mobile' => [
            'title' => 'ProHelper Mobile API',
            'description' => 'API –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç, –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.',
            'version' => '1.0.0',
            'baseUrl' => '/api/v1/mobile',
            'icon' => 'üì±',
            'status' => 'beta'
        ],
        'landing_admin' => [
            'title' => 'ProHelper Landing Admin API',
            'description' => 'API –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–æ–º, —Å—Ç–∞—Ç—å—è–º–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.',
            'version' => '1.0.0',
            'baseUrl' => '/api/v1/landing',
            'icon' => 'üìù',
            'status' => 'stable'
        ]
    ];

    return view('docs.index', compact('apis'));
});

Route::get('/docs/{type}', function (string $type) {
    $allowed = ['lk', 'admin', 'mobile', 'landing_admin'];
    if (!in_array($type, $allowed)) {
        abort(404, '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // 1) –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–¥–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π HTML –∏–∑ public/docs
    $candidatePaths = [
        public_path("docs/{$type}_api.html"),
        public_path("docs/{$type}/index.html"),
        public_path("docs/{$type}/api.html"),
        public_path('docs/api.html'), // –æ–±—â–∏–π fallback, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    ];

    foreach ($candidatePaths as $path) {
        if (file_exists($path)) {
            return response()->file($path);
        }
    }

    // 2) –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ HTML –Ω–µ—Ç ‚Äî —Ä–µ–Ω–¥–µ—Ä–∏–º Redoc –Ω–∞ –ª–µ—Ç—É –∏–∑ docs/openapi/{type}/openapi.yaml
    $yamlPath = base_path("docs/openapi/{$type}/openapi.yaml");
    if (file_exists($yamlPath)) {
        $specUrl = url("/docs-src/{$type}/openapi.yaml");
        $html = "<!DOCTYPE html><html lang=\"ru\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><title>API Docs - {$type}</title><style>body{margin:0;padding:0;} .wrapper{height:100vh;}</style></head><body><redoc spec-url=\"{$specUrl}\" class=\"wrapper\"></redoc><script src=\"https://cdn.redoc.ly/redoc/latest/bundles/redoc.standalone.js\"></script></body></html>";
        return response($html, 200)->header('Content-Type', 'text/html');
    }

    abort(404, '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
});

// –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è –æ—Ç–¥–∞—á–∏ YAML-—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
Route::get('/docs-src/{type}/openapi.yaml', function (string $type) {
    $allowed = ['lk', 'admin', 'mobile', 'landing_admin'];
    abort_unless(in_array($type, $allowed), 404);
    $yamlPath = base_path("docs/openapi/{$type}/openapi.yaml");
    abort_unless(file_exists($yamlPath), 404);
    return response()->file($yamlPath, [
        'Content-Type' => 'application/yaml; charset=UTF-8',
        'Cache-Control' => 'public, max-age=3600',
    ]);
});
