<?php

namespace App\BusinessModules\Features\AIAssistant\Services;

class IntentRecognizer
{
    /**
     * Паттерны для распознавания намерений пользователя
     * Чем раньше в массиве - тем выше приоритет при совпадении
     */
    protected array $patterns = [
        // Детали конкретного проекта (высокий приоритет)
        'project_details' => [
            'проект №',
            'детали проект',
            'подробности проект',
            'информация о проект',
            'расскажи про проект',
            'что по проекту',
            'о проекте',
            'данные проект',
            'характеристики проект',
            'параметры проект',
            'полная информация проект',
            'развернуто про проект',
            'про проект',
            'по проекту',
            'покажи проект',
            'выдай проект',
            'нужен проект',
            'хочу про проект',
            'а что с проект',
            'а по проект',
            'нужна инфа по проект',
            'инфа о проект',
        ],
        
        // Поиск проектов
        'project_search' => [
            'найди проект',
            'поиск проект',
            'найти проект',
            'проект по адрес',
            'проект для',
            'проект с названи',
            'проект по названию',
            'где проект',
            'поищи проект',
            'ищи проект',
            'проекты у',
        ],
        
        // Статус проектов (общий)
        'project_status' => [
            'статус проект',
            'как идут проект',
            'как дела',
            'что происходит',
            'активные проекты',
            'текущие проекты',
            'покажи проект',
            'список проект',
            'какие проекты',
            'все проекты',
            'проекты в работе',
            'незавершенные проект',
            'open проект',
            'проекты на сегодня',
            'обзор проект',
            'состояние проект',
            'по проектам',
            'давай по всем проектам',
        ],
        
        // Бюджет и финансы проектов
        'project_budget' => [
            'бюджет проект',
            'сколько потрачено',
            'затраты по проект',
            'расходы проект',
            'осталось денег',
            'финанс проект',
            'стоимость проект',
            'смета проект',
            'план факт',
            'перерасход',
            'экономия',
            'освоение бюджет',
            'деньги на проект',
            'траты',
            'издержки',
            'расход средств',
        ],
        
        // Риски проектов
        'project_risks' => [
            'риск',
            'проблем',
            'задержк',
            'срывается',
            'отстава',
            'зона риска',
            'в опасности',
            'красная зона',
            'проблемные проект',
            'срыв срок',
            'не успева',
            'тревог',
            'критическ',
            'угроз',
            'warning',
            'alert',
            'внимани',
            'под вопросом',
        ],
        
        // Поиск контрактов
        'contract_search' => [
            'какие контракт',
            'какие договор',
            'какие у нас контракт',
            'какие у нас договор',
            'список контракт',
            'список договор',
            'все контракт',
            'все договор',
            'покажи все контракт',
            'покажи все договор',
            'найди контракт',
            'найди договор',
            'поиск контракт',
            'поиск договор',
            'есть контракт',
            'есть договор',
            'у нас контракт',
            'у нас договор',
            'контракт с',
            'договор с',
            'контракты по',
            'договоры по',
            'договоренност',
            'соглашени',
            'подряд',
        ],
        
        // Детали конкретного контракта
        'contract_details' => [
            'контракт №',
            'договор №',
            'контракту',  // "по 1 контракту"
            'договору',   // "по договору"
            'давай контракт',
            'давай договор',
            'дай контракт',
            'дай договор',
            'выдай контракт',
            'выдай договор',
            'покажи контракт',
            'покажи договор',
            'нужен контракт',
            'нужен договор',
            'детали контракт',
            'детальн информацию', // "детальную информацию"
            'подробн информацию', // "подробную информацию"
            'подробност', // "подробности"
            'информация о контракт',
            'информацию по контракт',
            'информация по контракт',
            'инфо по контракт',
            'данные по контракт',
            'дай информацию по контракт',
            'дай инфо по контракт',
            'дай данные по контракт',
            'расскажи про контракт',
            'что по контракт',
            'условия договор',
            'параметры контракт',
            'про контракт',
            'по контракту',
            'о контракте',
            'хочу узнать про контракт',
            'а что там с контракт',
            'а по контракт',
            'полн информацию по контракт',
            'полную по контракт',
            'всю по контракт',
            'всю информацию по контракт',
        ],
        
        // Остатки материалов
        'material_stock' => [
            // Базовые запросы
            'остаток материал',
            'остатки материал',
            'остаток',
            'остатки',
            'запас материал',
            'запасы материал',
            'запас',
            'запасы',
            'материал',
            'материалов',
            'материалы',
            'матералы',  // опечатка
            'материяла',  // опечатка
            
            // На складе
            'на складе',
            'склад',
            'что на складе',
            'есть на складе',
            'лежит на складе',
            
            // Количество
            'сколько материал',
            'сколько осталось',
            'хватит',
            'хватает',
            'есть ли',
            'а есть',
            'имеется',
            
            // Проблемы с материалами
            'заканчива',
            'кончается',
            'кончаются',
            'мало материал',
            'нехватка',
            'дефицит',
            'нет материал',
            'не хватает',
            'закончились',
            'кончаются материал',
            'мало чего',
            
            // Складской учет
            'складские остатки',
            'инвентарь',
            'инвентаризация',
            'inventory',
            'stock',
            
            // Наличие
            'наличие материал',
            'что есть',
            'чего есть',
            'что имеется',
            'в наличии',
            'есть ли материал',
            
            // Уровни запасов
            'низкие остатки',
            'критичные остатки',
            'критический уровень',
            'минимальный запас',
        ],
        
        // Прогноз потребности в материалах
        'material_forecast' => [
            'прогноз материал',
            'потребность',
            'закупить',
            'заказать',
            'нужно купить',
            'необходим',
            'что купить',
            'план закуп',
            'заявка на материал',
            'forecast',
            'планируем',
            'понадобится',
            'требуется материал',
            'нужны материал',
        ],
        
        // Общий анализ и аналитика
        'analytics' => [
            'анализ',
            'аналитика',
            'отчет',
            'статистика',
            'показател',
            'метрик',
            'kpi',
            'эффективность',
            'производительность',
            'сводка',
            'дашборд',
            'dashboard',
            'overview',
        ],
        
        // Информация о текущем пользователе
        'user_info' => [
            'кто я',
            'как меня зовут',
            'мое имя',
            'моя роль',
            'мои права',
            'обо мне',
            'кто разговаривает',
            'с кем ты',
            'кто здесь',
            'мой профиль',
            'мои данные',
            'я кто',
            'а я кто',
            'кто я такой',
            'расскажи про меня',
            'мои полномочия',
            'что я могу',
            'мой доступ',
            'мой аккаунт',
        ],
        
        // Информация о сотрудниках
        'team_info' => [
            'сотрудник',
            'команда',
            'коллег',
            'работник',
            'персонал',
            'кто работает',
            'список сотрудник',
            'наша команда',
            'кадры',
            'staff',
            'team',
            'пользовател',
            'кто в системе',
            'кто тут работает',
            'кто у нас в компании',
            'наши работники',
            'кто в штате',
            'список людей',
            'покажи команду',
            'покажи сотрудников',
            'а кто работает',
            'у нас люди',
            'наши люди',
            'работяги',
            'кто есть',
            'кто у нас',
        ],
        
        // Информация об организации
        'organization_info' => [
            'о компании',
            'о нашей компании',
            'о организации',
            'расскажи о компании',
            'наша организация',
            'о нас',
            'информация о компании',
            'компания',
            'организация',
        ],
        
        // Помощь и возможности
        'help' => [
            'помощь',
            'help',
            'что ты умеешь',
            'что можешь',
            'твои возможности',
            'как работаешь',
            'что делаешь',
            'команды',
            'инструкция',
            'справка',
            'как пользоваться',
            'что спросить',
            'что ты можешь',
            'чем можешь помочь',
            'покажи возможности',
            'что умеешь делать',
            'как ты работаешь',
            'что спрашивать',
            'что можно узнать',
            'помоги',
            'не понимаю',
        ],
        
        // Приветствия и статус
        'greeting' => [
            'привет',
            'здравствуй',
            'добрый день',
            'доброе утро',
            'добрый вечер',
            'как дела',
            'как идет',
            'как там',
            'что нового',
            'как работа',
            'что у нас',
            'ну как',
            'как успехи',
            'все ок',
            'все нормально',
            'как проекты',
        ],
        
        // Генерация отчетов
        'generate_report' => [
            'отчет',
            'отчёт',
            'отчета',
            'сделай отчет',
            'создай отчет',
            'сформируй отчет',
            'построй отчет',
            'сгенерируй отчет',
            'нужен отчет',
            'хочу отчет',
            'покажи отчет',
            'дай отчет',
            'выгрузи',
            'выгрузка',
            'экспорт',
            'сводка',
            'статистика по',
            'аналитика по',
        ],

        // Просмотр единиц измерения
        'measurement_units_list' => [
            'покажи единиц',
            'список единиц',
            'какие единиц',
            'все единицы измерения',
            'единицы измерения',
            'список единиц измерения',
            'покажи все единицы',
            'какие есть единицы',
        ],

        // Детали единицы измерения
        'measurement_unit_details' => [
            'единица №',
            'детали единицы',
            'информация о единице',
            'подробности единицы',
            'единица измерения №',
            'покажи единицу',
            'дай информацию по единице',
        ],

        // Создание единицы измерения
        'create_measurement_unit' => [
            'создай единиц',
            'заведи единиц',
            'добавь единиц',
            'новая единица',
            'сделай единицу',
            'создать единицу измерения',
            'добавить единицу измерения',
            'новая единица измерения',
        ],

        // Массовое создание единиц измерения
        'mass_create_measurement_units' => [
            'создай несколько единиц',
            'создай много единиц',
            'массовое создание единиц',
            'добавь несколько единиц',
            'создать несколько единиц измерения',
            'добавить список единиц',
            'создать единицы измерения списком',
            'массово создать единицы',
            'несколько единиц измерения',
            'список единиц создать',
        ],

        // Обновление единицы измерения
        'update_measurement_unit' => [
            'измени единиц',
            'обнови единиц',
            'поменяй единиц',
            'редактируй единиц',
            'изменить единицу измерения',
            'обновить единицу измерения',
            'поменять единицу измерения',
            'редактировать единицу измерения',
        ],

        // Удаление единицы измерения
        'delete_measurement_unit' => [
            'удали единиц',
            'удалить единицу измерения',
            'сними единиц',
            'убери единиц',
            'удалить единицу',
        ],

        // Помощь и возможности
        'help' => [
            'что ты умеешь',
            'помоги',
            'помощь',
            'функционал',
            'возможности',
            'что можешь',
            'справка',
            'как пользоваться',
            'инструкция',
            'руководство',
            'что делать',
            'помоги мне',
            'что я могу спросить',
            'какие команды',
            'что ты знаешь',
            'твои возможности',
        ],

        // Общие вопросы
        'general' => [],
    ];

    /**
     * Приоритеты интентов (чем больше число, тем выше приоритет при конфликте)
     */
    protected array $intentPriority = [
        'contract_details' => 12,     // Максимальный приоритет для детали контракта
        'project_details' => 10,      // Детали проекта
        'generate_report' => 9,       // Генерация отчетов
        'project_risks' => 9,
        'project_budget' => 8,
        'help' => 10,                 // Помощь - максимальный приоритет
        'measurement_unit_details' => 8, // Детали единицы измерения - высокий приоритет
        'create_measurement_unit' => 8,  // Создание единицы измерения - высокий приоритет
        'mass_create_measurement_units' => 8,  // Массовое создание единиц измерения
        'update_measurement_unit' => 8,  // Обновление единицы измерения
        'delete_measurement_unit' => 8,  // Удаление единицы измерения
        'measurement_units_list' => 7,   // Список единиц измерения
        'material_forecast' => 7,
        'user_info' => 7,             // Информация о пользователе
        'material_stock' => 6,
        'project_search' => 6,        // Поиск проектов
        'team_info' => 6,             // Информация о команде
        'contract_search' => 5,
        'organization_info' => 5,     // Информация об организации
        'project_status' => 4,
        'greeting' => 3,              // Приветствия
        'analytics' => 3,
        'general' => 1,               // Самый общий
    ];

    /**
     * Распознает намерение пользователя на основе запроса
     * Использует систему приоритетов при множественных совпадениях
     * 
     * @param string $query Запрос пользователя
     * @param string|null $previousIntent Предыдущий распознанный интент для контекста
     * @return string
     */
    public function recognize(string $query, ?string $previousIntent = null): string
    {
        $query = mb_strtolower($query);
        $matches = [];

        // Проверяем контекстные фразы, которые продолжают предыдущий запрос
        if ($previousIntent && $this->isContextualFollowUp($query)) {
            // Если это контекстная фраза, возвращаем тот же intent
            return $previousIntent;
        }

        // Явное определение типа по ключевым словам
        $hasContract = (mb_strpos($query, 'контракт') !== false || mb_strpos($query, 'договор') !== false);
        $hasProject = (mb_strpos($query, 'проект') !== false);

        // Собираем все совпавшие интенты с их приоритетами
        foreach ($this->patterns as $intent => $keywords) {
            foreach ($keywords as $keyword) {
                if (mb_strpos($query, $keyword) !== false) {
                    $priority = $this->intentPriority[$intent] ?? 0;
                    
                    // Бонус за явное упоминание типа объекта
                    $typeBonus = 0;
                    if ($hasContract && strpos($intent, 'contract') !== false) {
                        $typeBonus = 50; // Огромный бонус для контрактов когда явно упомянут
                    }
                    if ($hasProject && strpos($intent, 'project') !== false && !$hasContract) {
                        $typeBonus = 50; // Бонус для проектов когда явно упомянут (и нет контракта)
                    }
                    
                    // Учитываем длину ключевого слова (длиннее = специфичнее)
                    $keywordLength = mb_strlen($keyword);
                    $score = $priority * 10 + $keywordLength + $typeBonus;
                    
                    if (!isset($matches[$intent]) || $matches[$intent] < $score) {
                        $matches[$intent] = $score;
                    }
                    
                    // Прерываем внутренний цикл, переходим к следующему интенту
                    break;
                }
            }
        }

        // Если нет совпадений, возвращаем general
        if (empty($matches)) {
            return 'general';
        }

        // Возвращаем интент с наивысшим приоритетом
        arsort($matches);
        return array_key_first($matches);
    }
    
    /**
     * Проверяет, является ли запрос контекстным продолжением предыдущего
     */
    protected function isContextualFollowUp(string $query): bool
    {
        $contextualPhrases = [
            // Запросы дополнительной информации
            'больше',
            'больше информации',
            'а больше',
            'еще больше',
            'ещё больше',
            'подробнее',
            'детальнее',
            'развернуто',
            'развернутее',
            'расскажи подробнее',
            'расскажи детальнее',
            'расскажи больше',
            'покажи больше',
            'дай больше',
            'хочу больше',
            'а подробнее',
            'а детальнее',
            'а больше инфы',
            'поподробнее',
            'подетальнее',
            
            // Про все/всех
            'обо всех',
            'про все',
            'по всем',
            'давай по всем',
            'покажи все',
            'покажи всё',
            'всё',
            'все',
            'со всей',
            'со всеми',
            'со всем',
            'всю информацию',
            'вся информация',
            'полностью',
            'целиком',
            'полная информация',
            'вся инфа',
            'всю инфу',
            
            // Ещё/еще
            'ещё',
            'еще',
            'расскажи ещё',
            'что ещё',
            'а ещё',
            'что еще',
            'а еще',
            
            // Также/тоже
            'также',
            'тоже',
            'и что еще',
            'и что ещё',
            
            // Запросы уточнения
            'подскажи',
            'подскажите',
            'я не знаю',
            'не знаю',
            
            // Конкретные данные
            'сроки',
            'даты',
            'цифры',
            'данные',
            'инфо',
            'информацию',
            'гп', // валовая прибыль
            'с гп',
            'сумма с гп',
            'прибыль',
            'аванс',
            'акты',
            'счета',
            'оплата',
            'финансы',
            
            // Простые команды
            'давай',
            'дай',
            'выдай',
            'покажи',
            'ну давай',
            'ну покажи',
            'а покажи',
            'а дай',
            'ну дай',
            'ну расскажи',
            
            // Разговорные
            'чё там',
            'что там',
            'ну',
            'че',
            'чё',
            'чего',
            'а чего',
            'а че',
            'ага',
            'угу',
            'хорошо',
            'ок',
            'окей',
            
            // Частые опечатки
            'давй',
            'сркои',
            'больш',
            'подробне',
        ];
        
        foreach ($contextualPhrases as $phrase) {
            if (mb_strpos($query, $phrase) !== false) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Извлекает все параметры из запроса
     */
    public function extractAllParams(string $query): array
    {
        $params = [];
        
        // Извлечение ID (универсальное - подходит для контрактов, проектов и т.д.)
        $id = $this->extractId($query);
        if ($id) {
            $params['contract_id'] = $id;
            $params['project_id'] = $id;
        }
        
        // Извлечение номера проекта
        $projectNumber = $this->extractProjectNumber($query);
        if ($projectNumber) {
            $params['project_number'] = $projectNumber;
        }
        
        // Извлечение названия проекта
        $projectName = $this->extractProjectName($query);
        if ($projectName) {
            $params['project_name'] = $projectName;
        }
        
        // Извлечение номера контракта
        $contractNumber = $this->extractContractNumber($query);
        if ($contractNumber) {
            $params['contract_number'] = $contractNumber;
        }
        
        // Извлечение названия контрагента
        $contractorName = $this->extractContractorName($query);
        if ($contractorName) {
            $params['contractor_name'] = $contractorName;
        }
        
        // Извлечение названия материала
        $materialName = $this->extractMaterialName($query);
        if ($materialName) {
            $params['material_name'] = $materialName;
        }
        
        // Извлечение временного периода
        $period = $this->extractTimePeriod($query);
        if ($period) {
            $params['period'] = $period;
        }
        
        return $params;
    }
    
    /**
     * Извлекает ID из запроса (любые цифры в контексте)
     */
    protected function extractId(string $query): ?int
    {
        // Паттерны для извлечения ID
        $patterns = [
            '/(?:контракт|договор|проект)\s+(?:№|#|номер)?\s*(\d+)/ui',  // "контракт 123", "проект №45"
            '/(?:по|про|для|о)\s+(?:контракт|договор|проект)[а-яёу]*\s+(\d+)/ui',  // "по контракту 123"
            '/(?:давай|дай|покажи|выдай)\s+(?:контракт|договор|проект)?[а-яёу]*\s+(\d+)/ui',  // "давай контракт 123"
            '/(?:первый|второй|третий|1-?й|2-?й|3-?й)\s*$/ui',  // "первый", "1й"
            '/^\s*(\d+)\s*$/u',  // Просто цифра "123"
            '/\s+(\d+)\s*$/u',  // Цифра в конце "контракт 123"
        ];
        
        foreach ($patterns as $pattern) {
            if (preg_match($pattern, $query, $matches)) {
                // Обработка порядковых числительных
                $value = $matches[1];
                if (preg_match('/первый|1-?й/ui', $value)) {
                    return 1;
                } elseif (preg_match('/второй|2-?й/ui', $value)) {
                    return 2;
                } elseif (preg_match('/третий|3-?й/ui', $value)) {
                    return 3;
                }
                
                return (int)$value;
            }
        }
        
        return null;
    }

    public function extractProjectName(string $query): ?string
    {
        if (preg_match('/проект[а-яё\s]+[«"]([^»"]+)[»"]/ui', $query, $matches)) {
            return $matches[1];
        }

        if (preg_match('/проект[а-яё\s]+(\S+)/ui', $query, $matches)) {
            return $matches[1];
        }

        return null;
    }

    /**
     * Извлекает номер проекта из запроса
     */
    public function extractProjectNumber(string $query): ?string
    {
        // Паттерны: "проект #123", "проект №45", "проекта 78"
        if (preg_match('/проект[а-яё\s]*[#№]?\s*(\d+)/ui', $query, $matches)) {
            return $matches[1];
        }
        
        return null;
    }
    
    /**
     * Извлекает номер контракта из запроса
     */
    public function extractContractNumber(string $query): ?string
    {
        // Паттерны с номером контракта
        $patterns = [
            '/(?:договор|контракт)[а-яё\s]*№\s*([\d\/\-А-Яа-яA-Za-z]+)/ui',
            '/№\s*([\d\/\-А-Яа-яA-Za-z]+)(?:\s+от)?/ui',
            '/контракт[а-яё\s]*([\d\/\-А-Яа-яA-Za-z]+)/ui',
            '/договор[а-яё\s]*([\d\/\-А-Яа-яA-Za-z]+)/ui',
        ];
        
        foreach ($patterns as $pattern) {
            if (preg_match($pattern, $query, $matches)) {
                return $matches[1];
            }
        }

        return null;
    }
    
    /**
     * Извлекает название контрагента
     */
    public function extractContractorName(string $query): ?string
    {
        // Паттерны: "с компанией СтройИнвест", "подрядчик АБВ", "контрагент Рога и Копыта"
        $patterns = [
            '/(?:с компанией|с организацией|с|подрядчик|контрагент)\s+([А-ЯЁа-яёA-Za-z0-9\s\-"«»]+?)(?:\s|$|,|\.|\?)/ui',
            '/(?:ООО|ИП|ЗАО|ОАО|АО)\s+[«"]?([^»",\.]+)[»"]?/ui',
        ];
        
        foreach ($patterns as $pattern) {
            if (preg_match($pattern, $query, $matches)) {
                $name = trim($matches[1]);
                // Убираем слишком короткие или слишком длинные совпадения
                if (mb_strlen($name) >= 3 && mb_strlen($name) <= 100) {
                    return $name;
                }
            }
        }
        
        return null;
    }
    
    /**
     * Извлекает название материала
     */
    public function extractMaterialName(string $query): ?string
    {
        // Паттерны: "материал цемент", "кирпич красный", "арматура 12мм"
        $commonMaterials = [
            'цемент', 'бетон', 'кирпич', 'арматура', 'песок', 'щебень',
            'гипс', 'штукатурка', 'краска', 'гвозди', 'саморезы', 'доски',
            'фанера', 'утеплитель', 'пенопласт', 'минвата', 'плитка', 
            'керамогранит', 'линолеум', 'ламинат', 'обои'
        ];
        
        $query_lower = mb_strtolower($query);
        
        foreach ($commonMaterials as $material) {
            if (mb_strpos($query_lower, $material) !== false) {
                return $material;
            }
        }
        
        // Извлечение из паттернов типа "материал [название]"
        if (preg_match('/материал[а-яё\s]+([а-яёa-z0-9\s\-]+?)(?:\s|$|,|\.|\?)/ui', $query, $matches)) {
            $name = trim($matches[1]);
            if (mb_strlen($name) >= 3 && mb_strlen($name) <= 50) {
                return $name;
            }
        }
        
        return null;
    }

    /**
     * Извлекает список единиц измерения из запроса на массовое создание
     */
    public function extractMeasurementUnitsList(string $query): array
    {
        $units = [];

        // Ищем паттерн после ключевых слов создания
        if (preg_match('/единиц[^:]*:\s*(.+)$/ui', $query, $matches)) {
            $unitsText = trim($matches[1]);
        } elseif (preg_match('/единицы[^:]*:\s*(.+)$/ui', $query, $matches)) {
            $unitsText = trim($matches[1]);
        } else {
            return $units; // Не нашли паттерн
        }

        if (!isset($unitsText)) {
            return $units;
        }

        // Разбираем список единиц, разделенных запятыми
        $unitStrings = preg_split('/\s*,\s*/', $unitsText);

        foreach ($unitStrings as $unitString) {
            $unitString = trim($unitString);

            // Ищем паттерн "название (сокращение)" или "название сокращение"
            if (preg_match('/^(.+?)\s*\(([^)]+)\)$/', $unitString, $matches)) {
                // Формат: название (сокращение)
                $name = trim($matches[1]);
                $shortName = trim($matches[2]);
            } elseif (preg_match('/^(.+?)\s+(.+)$/', $unitString, $matches)) {
                // Формат: название сокращение
                $name = trim($matches[1]);
                $shortName = trim($matches[2]);
            } else {
                // Не можем разобрать - пропускаем
                continue;
            }

            // Валидация
            if (empty($name) || empty($shortName) ||
                strlen($name) > 255 || strlen($shortName) > 50) {
                continue;
            }

            $units[] = [
                'name' => $name,
                'short_name' => $shortName,
                'type' => 'other', // По умолчанию
                'description' => null,
                'is_default' => false
            ];
        }

        return $units;
    }

    /**
     * Извлекает временной период из запроса
     */
    public function extractTimePeriod(string $query): ?string
    {
        $query_lower = mb_strtolower($query);
        
        // Абсолютные периоды
        $periods = [
            'сегодня' => 'today',
            'вчера' => 'yesterday',
            'на сегодня' => 'today',
            'за сегодня' => 'today',
            'за вчера' => 'yesterday',
            'неделя' => 'week',
            'за неделю' => 'week',
            'текущая неделя' => 'current_week',
            'эта неделя' => 'current_week',
            'месяц' => 'month',
            'за месяц' => 'month',
            'текущий месяц' => 'current_month',
            'этот месяц' => 'current_month',
            'квартал' => 'quarter',
            'за квартал' => 'quarter',
            'год' => 'year',
            'за год' => 'year',
            'текущий год' => 'current_year',
            'этот год' => 'current_year',
        ];
        
        foreach ($periods as $keyword => $period) {
            if (mb_strpos($query_lower, $keyword) !== false) {
                return $period;
            }
        }
        
        // Извлечение конкретных дат
        if (preg_match('/(\d{1,2})\.(\d{1,2})\.(\d{4})/', $query, $matches)) {
            return $matches[0]; // Вернуть дату в формате DD.MM.YYYY
        }
        
        // Извлечение месяца и года
        $months = [
            'январ' => '01', 'феврал' => '02', 'март' => '03', 'апрел' => '04',
            'ма[йя]' => '05', 'июн' => '06', 'июл' => '07', 'август' => '08',
            'сентябр' => '09', 'октябр' => '10', 'ноябр' => '11', 'декабр' => '12',
        ];
        
        foreach ($months as $month => $number) {
            if (preg_match('/' . $month . '[а-яё]*\s+(\d{4})/ui', $query, $matches)) {
                return $number . '.' . $matches[1]; // MM.YYYY
            }
        }
        
        return null;
    }
}


