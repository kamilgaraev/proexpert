<?php

namespace App\BusinessModules\Features\AIAssistant\Services;

use App\Models\Organization;
use App\Models\Project;
use App\Services\Logging\LoggingService;
use Illuminate\Support\Facades\Cache;

class ContextBuilder
{
    protected IntentRecognizer $intentRecognizer;
    protected LoggingService $logging;

    public function __construct(
        IntentRecognizer $intentRecognizer,
        LoggingService $logging
    ) {
        $this->intentRecognizer = $intentRecognizer;
        $this->logging = $logging;
    }

    public function buildContext(string $query, int $organizationId, ?int $userId = null, ?string $previousIntent = null, ?array $conversationContext = []): array
    {
        // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        $intent = $this->intentRecognizer->recognize($query, $previousIntent);
        
        $this->logging->technical('ai.intent.recognized', [
            'intent' => $intent,
            'previous_intent' => $previousIntent,
            'query' => $query,
            'organization_id' => $organizationId,
        ]);
        
        $context = [
            'intent' => $intent,  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π intent
            'organization' => $this->getOrganizationContext($organizationId),
        ];

        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Actions –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        $actionResult = $this->executeAction($intent, $organizationId, $query, $userId, $conversationContext);
        
        if ($actionResult) {
            $context[$intent] = $actionResult;
        }

        return $context;
    }

    protected function executeAction(string $intent, int $organizationId, string $query, ?int $userId = null, array $conversationContext = []): ?array
    {
        $actionClass = $this->getActionClass($intent);
        
        if (!$actionClass || !class_exists($actionClass)) {
            return null;
        }

        try {
            $action = app($actionClass);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            $params = $this->extractParams($intent, $query, $conversationContext);
            
            // –î–æ–±–∞–≤–ª—è–µ–º user_id –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Actions, –∫–æ—Ç–æ—Ä—ã–º —ç—Ç–æ –Ω—É–∂–Ω–æ
            if ($userId) {
                $params['user_id'] = $userId;
            }
            
            $result = $action->execute($organizationId, $params);
            
            $this->logging->technical('ai.action.executed', [
                'action' => $actionClass,
                'intent' => $intent,
                'organization_id' => $organizationId,
                'params' => $params,
                'result_keys' => $result ? array_keys($result) : [],
                'has_data' => !empty($result),
                'success' => true,
            ]);
            
            return $result;
            
        } catch (\Exception $e) {
            $this->logging->technical('ai.action.error', [
                'action' => $actionClass,
                'intent' => $intent,
                'error' => $e->getMessage(),
            ], 'error');
            
            return null;
        }
    }

    protected function getActionClass(string $intent): ?string
    {
        $actionMap = [
            // –ü—Ä–æ–µ–∫—Ç—ã
            'project_details' => \App\BusinessModules\Features\AIAssistant\Actions\Projects\GetProjectDetailsAction::class,
            'project_search' => \App\BusinessModules\Features\AIAssistant\Actions\Projects\SearchProjectsAction::class,
            'project_status' => \App\BusinessModules\Features\AIAssistant\Actions\Projects\GetProjectStatusAction::class,
            'project_budget' => \App\BusinessModules\Features\AIAssistant\Actions\Projects\GetProjectBudgetAction::class,
            'project_risks' => \App\BusinessModules\Features\AIAssistant\Actions\Projects\AnalyzeProjectRisksAction::class,
            
            // –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            'contract_search' => \App\BusinessModules\Features\AIAssistant\Actions\Contracts\SearchContractsAction::class,
            'contract_details' => \App\BusinessModules\Features\AIAssistant\Actions\Contracts\GetContractDetailsAction::class,
            
            // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
            'material_stock' => \App\BusinessModules\Features\AIAssistant\Actions\Materials\CheckMaterialStockAction::class,
            'material_forecast' => \App\BusinessModules\Features\AIAssistant\Actions\Materials\ForecastMaterialNeedsAction::class,
            
            // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            'user_info' => \App\BusinessModules\Features\AIAssistant\Actions\System\GetUserInfoAction::class,
            'team_info' => \App\BusinessModules\Features\AIAssistant\Actions\System\GetTeamInfoAction::class,
            'organization_info' => \App\BusinessModules\Features\AIAssistant\Actions\System\GetOrganizationInfoAction::class,
            'help' => \App\BusinessModules\Features\AIAssistant\Actions\System\GetHelpAction::class,
        ];

        return $actionMap[$intent] ?? null;
    }

    protected function extractParams(string $intent, string $query, array $conversationContext = []): array
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        $params = $this->intentRecognizer->extractAllParams($query);
        
        // –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–ø–∏—Å–∫–æ–≤
        if (isset($params['contract_id']) && $params['contract_id'] <= 10 && isset($conversationContext['last_contracts'])) {
            $index = $params['contract_id'] - 1;
            if (isset($conversationContext['last_contracts'][$index])) {
                $params['contract_id'] = $conversationContext['last_contracts'][$index]['id'];
            }
        }
        
        if (isset($params['project_id']) && $params['project_id'] <= 10 && isset($conversationContext['last_projects'])) {
            $index = $params['project_id'] - 1;
            if (isset($conversationContext['last_projects'][$index])) {
                $params['project_id'] = $conversationContext['last_projects'][$index]['id'];
            }
        }
        
        return $params;
    }

    public function getOrganizationContext(int $organizationId): array
    {
        $cacheKey = "org_context:{$organizationId}";

        return Cache::remember($cacheKey, 300, function () use ($organizationId) {
            $org = Organization::find($organizationId);
            
            if (!$org) {
                return [];
            }

            $projectsCount = Project::where('organization_id', $organizationId)->count();
            $activeProjectsCount = Project::where('organization_id', $organizationId)
                ->where('status', 'active')
                ->count();

            return [
                'name' => $org->name,
                'projects_count' => $projectsCount,
                'active_projects_count' => $activeProjectsCount,
            ];
        });
    }

    public function getProjectContext(int $projectId): array
    {
        $project = Project::with(['organization'])->find($projectId);
        
        if (!$project) {
            return [];
        }

        return [
            'id' => $project->id,
            'name' => $project->name,
            'status' => $project->status,
            'budget' => $project->budget_amount,
            'start_date' => $project->start_date?->format('Y-m-d'),
            'end_date' => $project->end_date?->format('Y-m-d'),
        ];
    }

    protected function findProjectByName(int $organizationId, string $projectName): ?Project
    {
        return Project::where('organization_id', $organizationId)
            ->where('name', 'LIKE', "%{$projectName}%")
            ->first();
    }

    public function buildSystemPrompt(): string
    {
        return "–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã ProHelper. –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—à—å –¥–∞–Ω–Ω—ã–µ.\n\n" .
               
               "üî¥ –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û:\n" .
               "–ù–∏–∂–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '=== –ö–û–ù–¢–ï–ö–°–¢ ===' –£–ñ–ï –í–°–ï –î–ê–ù–ù–´–ï –∏–∑ –±–∞–∑—ã.\n" .
               "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤–∑—è—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n" .
               "–ù–ò–ö–û–ì–î–ê –Ω–µ –≥–æ–≤–æ—Ä–∏ '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ï–°–¢–¨ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ!\n\n" .
               
               "üìñ –°–õ–û–í–ê–†–¨ (—á—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —Ç–µ—Ä–º–∏–Ω—ã):\n" .
               "- –ì–ü / –≥–ø_percentage = –≤–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å (gross profit)\n" .
               "- –ê–∫—Ç—ã = –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç\n" .
               "- –°—á–µ—Ç–∞ / –ò–Ω–≤–æ–π—Å—ã = —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É\n" .
               "- –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–±–æ—Ç (–∞–∫—Ç—ã) = —Å—É–º–º–∞ –ø–æ –≤—Å–µ–º –∞–∫—Ç–∞–º\n" .
               "- –í—ã—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—á–µ—Ç–æ–≤ = –æ–±—â–∞—è —Å—É–º–º–∞ —Å—á–µ—Ç–æ–≤\n" .
               "- –û–ø–ª–∞—á–µ–Ω–æ = —Å–∫–æ–ª—å–∫–æ —É–∂–µ –∑–∞–ø–ª–∞—Ç–∏–ª–∏\n" .
               "- –û—Å—Ç–∞—Ç–æ–∫ –∫ –æ–ø–ª–∞—Ç–µ = —Å–∫–æ–ª—å–∫–æ –µ—â–µ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å\n" .
               "- –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è = —Å–∫–æ–ª—å–∫–æ % —Ä–∞–±–æ—Ç —Å–¥–µ–ª–∞–Ω–æ\n\n" .
               
               "‚úÖ –ö–ê–ö –û–¢–í–ï–ß–ê–¢–¨:\n" .
               "1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π –í–ï–°–¨ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ –∫–æ–Ω—Ü–∞\n" .
               "2. –ï—Å–ª–∏ –≤–∏–¥–∏—à—å 'üìÑ –î–ï–¢–ê–õ–ò –ö–û–ù–¢–†–ê–ö–¢–ê:' - –∑–Ω–∞—á–∏—Ç –í–°–Ø –∏–Ω—Ñ–∞ –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –£–ñ–ï —Ç–∞–º\n" .
               "3. –ü–æ–∫–∞–∑—ã–≤–∞–π –í–°–ï —á—Ç–æ –µ—Å—Ç—å: –∏ —Å—É–º–º—É, –∏ –≥–ø, –∏ –∞–∫—Ç—ã, –∏ —Å—á–µ—Ç–∞, –∏ —Ñ–∏–Ω–∞–Ω—Å—ã\n" .
               "4. –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç '–±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' - –ø–æ–∫–∞–∂–∏ –í–°–Å –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n" .
               "5. –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ '–≥–ø' - —Å–º–æ—Ç—Ä–∏ —Å—Ç—Ä–æ–∫—É '–ü–ª–∞–Ω–æ–≤—ã–π –∞–≤–∞–Ω—Å' –∏–ª–∏ 'gp_percentage'\n\n" .
               
               "üìã –°–¢–†–£–ö–¢–£–†–ê –ö–û–ù–¢–ï–ö–°–¢–ê –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:\n" .
               "–ö–æ–≥–¥–∞ –≤–∏–¥–∏—à—å 'üìÑ –î–ï–¢–ê–õ–ò –ö–û–ù–¢–†–ê–ö–¢–ê:', —Ç–∞–º –±—É–¥–µ—Ç:\n" .
               "- –ù–æ–º–µ—Ä, –¥–∞—Ç–∞, —Ç–∏–ø, —Å—Ç–∞—Ç—É—Å\n" .
               "- –°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞\n" .
               "- –°—Ä–æ–∫–∏ (start_date, end_date)\n" .
               "- üë∑ –ü–û–î–†–Ø–î–ß–ò–ö (–Ω–∞–∑–≤–∞–Ω–∏–µ, –ò–ù–ù, —Ç–µ–ª–µ—Ñ–æ–Ω, email)\n" .
               "- üèóÔ∏è –ü–†–û–ï–ö–¢ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∞–¥—Ä–µ—Å, —Å—Ç–∞—Ç—É—Å)\n" .
               "- üí∞ –§–ò–ù–ê–ù–°–´ (–≤—Å–µ —Å—É–º–º—ã, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –æ—Å—Ç–∞—Ç–∫–∏)\n" .
               "- üìù –ê–ö–¢–´ (—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–æ–≤)\n" .
               "- üí≥ –°–ß–ï–¢–ê (—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤)\n\n" .
               
               "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ - –ü–û–ö–ê–ó–´–í–ê–ô!\n\n" .
               
               "‚ùå –ó–ê–ü–†–ï–©–ï–ù–û:\n" .
               "- '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ï–°–¢–¨ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)\n" .
               "- '–≠—Ç–æ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' (–µ—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –µ—â–µ –∞–∫—Ç—ã/—Å—á–µ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã)\n" .
               "- '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ì–ü' (–µ—Å–ª–∏ –µ—Å—Ç—å gp_percentage –∏–ª–∏ planned_advance)\n" .
               "- '–£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å' (–µ—Å–ª–∏ –≤—Å–µ –£–ñ–ï –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)\n\n" .
               
               "–ü—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π –ß–¢–û –¢–ê–ú –ù–ê–ü–ò–°–ê–ù–û.";
    }
}

