<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Project;
use App\Models\Organization;
use App\Services\Project\ProjectContextService;
use App\Services\Organization\OrganizationProfileService;
use App\Enums\ProjectOrganizationRole;
use Illuminate\Support\Facades\DB;

class ValidateProjectRBACData extends Command
{
    protected $signature = 'rbac:validate 
                          {--fix : –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã}
                          {--verbose : –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é}';

    protected $description = '–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö Project-Based RBAC';

    protected ProjectContextService $projectContextService;
    protected OrganizationProfileService $organizationProfileService;
    protected array $issues = [];
    protected array $fixed = [];

    public function __construct(
        ProjectContextService $projectContextService,
        OrganizationProfileService $organizationProfileService
    ) {
        parent::__construct();
        $this->projectContextService = $projectContextService;
        $this->organizationProfileService = $organizationProfileService;
    }

    public function handle(): int
    {
        $this->info('üîç –ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Project-Based RBAC –¥–∞–Ω–Ω—ã—Ö...');
        $this->newLine();

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ project owners
        $this->checkProjectOwners();

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
        $this->checkRoles();

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ capabilities vs roles
        $this->checkCapabilitiesVsRoles();

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ orphaned –∑–∞–ø–∏—Å–µ–π
        $this->checkOrphanedRecords();

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        $this->checkDuplicates();

        // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ is_active —Ñ–ª–∞–≥–æ–≤
        $this->checkActiveFlags();

        $this->newLine();
        $this->displaySummary();

        return count($this->issues) === 0 ? self::SUCCESS : self::FAILURE;
    }

    protected function checkProjectOwners(): void
    {
        $this->info('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ project owners...');

        $projects = Project::all();
        $missingOwners = [];

        foreach ($projects as $project) {
            $ownerInPivot = DB::table('project_organization')
                ->where('project_id', $project->id)
                ->where('organization_id', $project->organization_id)
                ->exists();

            if (!$ownerInPivot) {
                $missingOwners[] = $project;
                $this->issues[] = "Project #{$project->id} '{$project->name}' –Ω–µ –∏–º–µ–µ—Ç owner –≤ project_organization";

                if ($this->option('fix')) {
                    DB::table('project_organization')->insert([
                        'project_id' => $project->id,
                        'organization_id' => $project->organization_id,
                        'role' => 'owner',
                        'role_new' => 'owner',
                        'is_active' => true,
                        'invited_at' => $project->created_at,
                        'accepted_at' => $project->created_at,
                        'created_at' => now(),
                        'updated_at' => now(),
                    ]);

                    $this->fixed[] = "–î–æ–±–∞–≤–ª–µ–Ω owner –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ #{$project->id}";
                    $this->line("  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω owner –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ #{$project->id}");
                }
            }
        }

        if (count($missingOwners) === 0) {
            $this->line('  ‚úÖ –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–º–µ—é—Ç owners');
        } else {
            $this->warn("  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ owners: " . count($missingOwners));
        }
    }

    protected function checkRoles(): void
    {
        $this->info('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –≤ project_organization...');

        $invalidRoles = DB::table('project_organization')
            ->whereNotIn('role_new', array_map(fn($r) => $r->value, ProjectOrganizationRole::cases()))
            ->orWhereNull('role_new')
            ->get();

        foreach ($invalidRoles as $record) {
            $this->issues[] = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å –≤ project_organization: project_id={$record->project_id}, org_id={$record->organization_id}, role='{$record->role_new}'";

            if ($this->option('fix')) {
                // –ü—ã—Ç–∞–µ–º—Å—è —Å–º–∞–ø–ø–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–æ–ª–∏
                $newRole = $this->mapOldRole($record->role ?? $record->role_new);

                if ($newRole) {
                    DB::table('project_organization')
                        ->where('project_id', $record->project_id)
                        ->where('organization_id', $record->organization_id)
                        ->update([
                            'role_new' => $newRole,
                            'updated_at' => now(),
                        ]);

                    $this->fixed[] = "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–æ–ª—å –¥–ª—è org {$record->organization_id} –≤ –ø—Ä–æ–µ–∫—Ç–µ {$record->project_id}";
                    $this->line("  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{$newRole}'");
                }
            }
        }

        if ($invalidRoles->isEmpty()) {
            $this->line('  ‚úÖ –í—Å–µ —Ä–æ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
        } else {
            $this->warn("  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π: " . $invalidRoles->count());
        }
    }

    protected function checkCapabilitiesVsRoles(): void
    {
        $this->info('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ capabilities vs roles...');

        $records = DB::table('project_organization')
            ->join('organizations', 'project_organization.organization_id', '=', 'organizations.id')
            ->select('project_organization.*', 'organizations.capabilities', 'organizations.name as org_name')
            ->where('project_organization.is_active', true)
            ->get();

        $incompatible = 0;

        foreach ($records as $record) {
            if (!$record->role_new || $record->role_new === 'owner' || $record->role_new === 'observer') {
                continue; // Owner –∏ observer –º–æ–≥—É—Ç –∏–º–µ—Ç—å –ª—é–±—ã–µ capabilities
            }

            $org = Organization::find($record->organization_id);
            $role = ProjectOrganizationRole::tryFrom($record->role_new);

            if (!$org || !$role) {
                continue;
            }

            $validation = $this->organizationProfileService->validateCapabilitiesForRole($org, $role);

            if (!$validation->isValid) {
                $incompatible++;
                $this->issues[] = "–ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å capabilities –¥–ª—è org '{$record->org_name}' (#{$record->organization_id}) —Å —Ä–æ–ª—å—é '{$record->role_new}' –≤ –ø—Ä–æ–µ–∫—Ç–µ #{$record->project_id}";

                if ($this->option('verbose')) {
                    $this->line("  ‚ö†Ô∏è  {$record->org_name}: " . implode(', ', $validation->errors));
                }
            }
        }

        if ($incompatible === 0) {
            $this->line('  ‚úÖ –í—Å–µ capabilities —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å —Ä–æ–ª—è–º–∏');
        } else {
            $this->warn("  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–µ–π: {$incompatible}");
            $this->line("  üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å capabilities –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö —Ä–æ–ª–∏");
        }
    }

    protected function checkOrphanedRecords(): void
    {
        $this->info('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ orphaned –∑–∞–ø–∏—Å–µ–π...');

        // –ó–∞–ø–∏—Å–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        $orphanedProjects = DB::table('project_organization')
            ->leftJoin('projects', 'project_organization.project_id', '=', 'projects.id')
            ->whereNull('projects.id')
            ->count();

        // –ó–∞–ø–∏—Å–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏
        $orphanedOrgs = DB::table('project_organization')
            ->leftJoin('organizations', 'project_organization.organization_id', '=', 'organizations.id')
            ->whereNull('organizations.id')
            ->count();

        if ($orphanedProjects > 0) {
            $this->issues[] = "–ù–∞–π–¥–µ–Ω–æ {$orphanedProjects} –∑–∞–ø–∏—Å–µ–π —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏";
            $this->warn("  ‚ö†Ô∏è  Orphaned project records: {$orphanedProjects}");

            if ($this->option('fix')) {
                DB::table('project_organization')
                    ->leftJoin('projects', 'project_organization.project_id', '=', 'projects.id')
                    ->whereNull('projects.id')
                    ->delete();

                $this->fixed[] = "–£–¥–∞–ª–µ–Ω–æ {$orphanedProjects} orphaned project records";
                $this->line("  ‚úÖ –£–¥–∞–ª–µ–Ω–æ orphaned –∑–∞–ø–∏—Å–µ–π");
            }
        }

        if ($orphanedOrgs > 0) {
            $this->issues[] = "–ù–∞–π–¥–µ–Ω–æ {$orphanedOrgs} –∑–∞–ø–∏—Å–µ–π —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏";
            $this->warn("  ‚ö†Ô∏è  Orphaned organization records: {$orphanedOrgs}");

            if ($this->option('fix')) {
                DB::table('project_organization')
                    ->leftJoin('organizations', 'project_organization.organization_id', '=', 'organizations.id')
                    ->whereNull('organizations.id')
                    ->delete();

                $this->fixed[] = "–£–¥–∞–ª–µ–Ω–æ {$orphanedOrgs} orphaned organization records";
                $this->line("  ‚úÖ –£–¥–∞–ª–µ–Ω–æ orphaned –∑–∞–ø–∏—Å–µ–π");
            }
        }

        if ($orphanedProjects === 0 && $orphanedOrgs === 0) {
            $this->line('  ‚úÖ Orphaned –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }

    protected function checkDuplicates(): void
    {
        $this->info('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');

        $duplicates = DB::table('project_organization')
            ->select('project_id', 'organization_id', DB::raw('COUNT(*) as count'))
            ->groupBy('project_id', 'organization_id')
            ->having('count', '>', 1)
            ->get();

        foreach ($duplicates as $duplicate) {
            $this->issues[] = "–î—É–±–ª–∏–∫–∞—Ç: project_id={$duplicate->project_id}, org_id={$duplicate->organization_id}, count={$duplicate->count}";
            $this->warn("  ‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω: project {$duplicate->project_id}, org {$duplicate->organization_id} ({$duplicate->count} –∑–∞–ø–∏—Å–µ–π)");

            if ($this->option('fix')) {
                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                $records = DB::table('project_organization')
                    ->where('project_id', $duplicate->project_id)
                    ->where('organization_id', $duplicate->organization_id)
                    ->orderBy('created_at', 'desc')
                    ->get();

                $toKeep = $records->first()->id;

                DB::table('project_organization')
                    ->where('project_id', $duplicate->project_id)
                    ->where('organization_id', $duplicate->organization_id)
                    ->where('id', '!=', $toKeep)
                    ->delete();

                $this->fixed[] = "–£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è project {$duplicate->project_id}, org {$duplicate->organization_id}";
                $this->line("  ‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–∞–º–∞—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å");
            }
        }

        if ($duplicates->isEmpty()) {
            $this->line('  ‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }

    protected function checkActiveFlags(): void
    {
        $this->info('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ is_active —Ñ–ª–∞–≥–æ–≤...');

        $nullFlags = DB::table('project_organization')
            ->whereNull('is_active')
            ->count();

        if ($nullFlags > 0) {
            $this->issues[] = "–ù–∞–π–¥–µ–Ω–æ {$nullFlags} –∑–∞–ø–∏—Å–µ–π —Å NULL is_active";
            $this->warn("  ‚ö†Ô∏è  NULL is_active flags: {$nullFlags}");

            if ($this->option('fix')) {
                DB::table('project_organization')
                    ->whereNull('is_active')
                    ->update(['is_active' => true]);

                $this->fixed[] = "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {$nullFlags} NULL is_active —Ñ–ª–∞–≥–æ–≤";
                $this->line("  ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã is_active = true");
            }
        } else {
            $this->line('  ‚úÖ –í—Å–µ is_active —Ñ–ª–∞–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        }
    }

    protected function mapOldRole(?string $oldRole): ?string
    {
        return match ($oldRole) {
            'child_contractor' => 'subcontractor',
            'collaborator' => 'contractor',
            default => null,
        };
    }

    protected function displaySummary(): void
    {
        $this->info('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        $this->info('üìä –ò–¢–û–ì–ò –í–ê–õ–ò–î–ê–¶–ò–ò');
        $this->info('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

        if (count($this->issues) === 0) {
            $this->info('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
            $this->line('   –°–∏—Å—Ç–µ–º–∞ Project-Based RBAC –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.');
        } else {
            $this->error('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ' . count($this->issues));

            if ($this->option('fix') && count($this->fixed) > 0) {
                $this->info('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ' . count($this->fixed));
                $this->newLine();
                $this->line('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
                foreach ($this->fixed as $fix) {
                    $this->line("  ‚Ä¢ {$fix}");
                }
            } else {
                $this->newLine();
                $this->line('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –æ–ø—Ü–∏–µ–π --fix –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
            }
        }

        $this->newLine();
    }
}
