<?php

namespace App\Console\Commands;

use App\BusinessModules\Core\MultiOrganization\Services\HoldingContractorSyncService;
use App\Models\Organization;
use App\Modules\Core\AccessController;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –≤ —Ö–æ–ª–¥–∏–Ω–≥–∞—Ö
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * php artisan multiorg:sync-holding-contractors --all
 * php artisan multiorg:sync-holding-contractors --organization=14
 * php artisan multiorg:sync-holding-contractors --dry-run
 */
class SyncHoldingContractors extends Command
{
    protected $signature = 'multiorg:sync-holding-contractors
                            {--organization= : ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏}
                            {--all : –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ö–æ–ª–¥–∏–Ω–≥–∏}
                            {--dry-run : –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π}
                            {--force : –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç}';

    protected $description = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ —Ö–æ–ª–¥–∏–Ω–≥–∞—Ö';

    protected HoldingContractorSyncService $contractorSync;
    protected AccessController $accessController;

    public function __construct(
        HoldingContractorSyncService $contractorSync,
        AccessController $accessController
    ) {
        parent::__construct();
        $this->contractorSync = $contractorSync;
        $this->accessController = $accessController;
    }

    public function handle(): int
    {
        $this->info('üöÄ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ —Ö–æ–ª–¥–∏–Ω–≥–∞...');
        $this->newLine();

        $isDryRun = $this->option('dry-run');
        $organizationId = $this->option('organization');
        $all = $this->option('all');

        if ($isDryRun) {
            $this->warn('‚ö†Ô∏è  –†–µ–∂–∏–º DRY-RUN: –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            $this->newLine();
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        $organizations = $this->getOrganizationsToProcess($organizationId, $all);

        if ($organizations->isEmpty()) {
            $this->error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            return self::FAILURE;
        }

        $this->info("üìã –ù–∞–π–¥–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {$organizations->count()}");
        $this->newLine();

        $totalStats = [
            'processed' => 0,
            'created' => 0,
            'updated' => 0,
            'skipped' => 0,
            'errors' => 0,
        ];

        $bar = $this->output->createProgressBar($organizations->count());
        $bar->start();

        foreach ($organizations as $org) {
            if (!$isDryRun) {
                $result = $this->contractorSync->syncHoldingContractors($org->id);
            } else {
                $result = $this->simulateSync($org);
            }

            $totalStats['processed']++;
            $totalStats['created'] += $result['created'] ?? 0;
            $totalStats['updated'] += $result['updated'] ?? 0;
            $totalStats['skipped'] += $result['skipped'] ?? 0;
            
            if (isset($result['errors']) && count($result['errors']) > 0) {
                $totalStats['errors'] += count($result['errors']);
            }

            $bar->advance();
        }

        $bar->finish();
        $this->newLine(2);

        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        $this->displayResults($totalStats, $isDryRun);

        return self::SUCCESS;
    }

    protected function getOrganizationsToProcess($organizationId, $all)
    {
        if ($organizationId) {
            $org = Organization::find($organizationId);
            
            if (!$org) {
                $this->error("‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å ID {$organizationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                return collect();
            }

            if (!$this->hasMultiOrgAccess($org->id)) {
                $this->error("‚ùå –£ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {$org->name} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é multi-organization");
                return collect();
            }

            return collect([$org]);
        }

        if ($all) {
            $allOrgs = Organization::where(function($query) {
                    $query->where('is_holding', true)
                          ->orWhereNotNull('parent_organization_id');
                })
                ->where('is_active', true)
                ->get();
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é
            return $allOrgs->filter(function($org) {
                return $this->hasMultiOrgAccess($org->id);
            });
        }

        $this->error('‚ùå –£–∫–∞–∂–∏—Ç–µ --organization=ID –∏–ª–∏ --all');
        return collect();
    }

    protected function hasMultiOrgAccess(int $organizationId): bool
    {
        try {
            return $this->accessController->hasModuleAccess($organizationId, 'multi-organization');
        } catch (\Exception $e) {
            return false;
        }
    }

    protected function simulateSync(Organization $org): array
    {
        $result = [
            'organization_id' => $org->id,
            'organization_name' => $org->name,
            'created' => 0,
            'updated' => 0,
            'skipped' => 0,
        ];

        // –°–∏–º—É–ª—è—Ü–∏—è –¥–ª—è —Ö–æ–ª–¥–∏–Ω–≥–∞
        if ($org->is_holding) {
            $childCount = Organization::where('parent_organization_id', $org->id)
                ->where('is_active', true)
                ->count();
            
            // 2 –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –Ω–∞ –∫–∞–∂–¥—É—é –¥–æ—á–µ—Ä–Ω—é—é (—Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ)
            $result['created'] = $childCount * 2;
        }

        // –°–∏–º—É–ª—è—Ü–∏—è –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–π
        if ($org->parent_organization_id) {
            // 2 –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ (–≥–æ–ª–æ–≤–Ω–∞—è –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–π, –¥–æ—á–µ—Ä–Ω—è—è –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–π)
            $result['created'] += 2;

            // Siblings
            $siblingCount = Organization::where('parent_organization_id', $org->parent_organization_id)
                ->where('id', '!=', $org->id)
                ->where('is_active', true)
                ->count();
            
            // 2 –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –Ω–∞ –∫–∞–∂–¥—É—é sibling (—Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ)
            $result['created'] += $siblingCount * 2;
        }

        return $result;
    }

    protected function displayResults(array $stats, bool $isDryRun): void
    {
        $this->info('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        $this->newLine();

        $this->table(
            ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            [
                ['–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π', $stats['processed']],
                ['–°–æ–∑–¥–∞–Ω–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤', $stats['created']],
                ['–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤', $stats['updated']],
                ['–ü—Ä–æ–ø—É—â–µ–Ω–æ', $stats['skipped']],
                ['–û—à–∏–±–æ–∫', $stats['errors']],
            ]
        );

        if ($isDryRun) {
            $this->newLine();
            $this->warn('‚ö†Ô∏è  –≠—Ç–æ –±—ã–ª —Ä–µ–∂–∏–º DRY-RUN. –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ —Ñ–ª–∞–≥–∞ --dry-run');
        }

        if ($stats['errors'] > 0) {
            $this->newLine();
            $this->error("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f storage/logs/laravel.log");
        }
    }
}

