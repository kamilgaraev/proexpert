<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use App\Models\Project;

class AddProjectOwnersCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'projects:add-owners 
                            {--dry-run : –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ, –Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–î–æ–±–∞–≤–∏—Ç—å owner –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –≤ project_organization –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞';

    /**
     * Execute the console command.
     */
    public function handle(): int
    {
        $dryRun = $this->option('dry-run');
        
        if ($dryRun) {
            $this->info('üîç DRY RUN MODE - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
        }
        
        $this->info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ owners...');
        
        // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
        $projects = Project::select('id', 'organization_id', 'created_at')->get();
        
        $this->info("–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {$projects->count()}");
        
        $added = 0;
        $skipped = 0;
        
        DB::transaction(function() use ($projects, $dryRun, &$added, &$skipped) {
            foreach ($projects as $project) {
                // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ owner –≤ project_organization
                $exists = DB::table('project_organization')
                    ->where('project_id', $project->id)
                    ->where('organization_id', $project->organization_id)
                    ->exists();
                
                if ($exists) {
                    $skipped++;
                    continue;
                }
                
                if (!$dryRun) {
                    // –î–æ–±–∞–≤–∏—Ç—å owner
                    DB::table('project_organization')->insert([
                        'project_id' => $project->id,
                        'organization_id' => $project->organization_id,
                        'role' => 'owner',
                        'role_new' => 'owner', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
                        'is_active' => true,
                        'invited_at' => $project->created_at,
                        'accepted_at' => $project->created_at,
                        'created_at' => now(),
                        'updated_at' => now(),
                    ]);
                }
                
                $added++;
                
                if ($added % 50 === 0) {
                    $this->info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {$added}...");
                }
            }
        });
        
        $this->newLine();
        $this->info("‚úÖ –ì–æ—Ç–æ–≤–æ!");
        $this->info("–î–æ–±–∞–≤–ª–µ–Ω–æ: {$added}");
        $this->info("–ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): {$skipped}");
        
        if ($dryRun) {
            $this->warn('‚ö†Ô∏è  –≠—Ç–æ –±—ã–ª DRY RUN - –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ –≤ –ë–î');
            $this->info('–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ —Ñ–ª–∞–≥–∞ --dry-run');
        }
        
        return self::SUCCESS;
    }
}
