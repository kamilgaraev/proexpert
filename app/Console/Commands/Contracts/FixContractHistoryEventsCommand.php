<?php

namespace App\Console\Commands\Contracts;

use App\Models\Contract;
use App\Models\ContractStateEvent;
use App\Services\Contract\ContractStateEventService;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class FixContractHistoryEventsCommand extends Command
{
    protected $signature = 'contracts:fix-history-events 
                          {--dry-run : –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è}
                          {--contract-id= : –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç}
                          {--fix-wrong-amounts : –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ amount_delta}';

    protected $description = '–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤';

    protected ContractStateEventService $stateEventService;

    public function __construct(ContractStateEventService $stateEventService)
    {
        parent::__construct();
        $this->stateEventService = $stateEventService;
    }

    public function handle(): int
    {
        $dryRun = $this->option('dry-run');
        $contractId = $this->option('contract-id');
        $fixWrongAmounts = $this->option('fix-wrong-amounts');

        $this->info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...');
        if ($dryRun) {
            $this->warn('‚ö†Ô∏è  –†–µ–∂–∏–º DRY-RUN: –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        }

        $stats = [
            'contracts_processed' => 0,
            'events_checked' => 0,
            'events_fixed' => 0,
            'errors' => [],
        ];

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        $contractsQuery = Contract::query();
        
        if ($contractId) {
            $contractsQuery->where('id', $contractId);
        }

        $contracts = $contractsQuery->get();

        $this->info("üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {$contracts->count()}");

        foreach ($contracts as $contract) {
            $stats['contracts_processed']++;

            try {
                if (!$contract->usesEventSourcing()) {
                    continue;
                }

                $activeEvents = ContractStateEvent::where('contract_id', $contract->id)
                    ->whereDoesntHave('supersededByEvents')
                    ->orderBy('created_at', 'asc')
                    ->get();

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –∏–∑ —Å–æ–±—ã—Ç–∏–π (–∏—Å–∫–ª—é—á–∞—è –ø–ª–∞—Ç–µ–∂–∏)
                $calculatedAmount = $activeEvents
                    ->filter(function ($event) {
                        return !in_array($event->event_type->value, ['payment_created']);
                    })
                    ->sum('amount_delta');

                $contractAmount = (float) ($contract->total_amount ?? 0);
                $difference = abs($calculatedAmount - $contractAmount);

                if ($difference > 0.01) {
                    $this->line("\n‚ö†Ô∏è  –ö–æ–Ω—Ç—Ä–∞–∫—Ç #{$contract->id}: —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ");
                    $this->line("   –°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {$contractAmount}");
                    $this->line("   –°—É–º–º–∞ –∏–∑ —Å–æ–±—ã—Ç–∏–π: {$calculatedAmount}");
                    $this->line("   –†–∞–∑–Ω–∏—Ü–∞: {$difference}");

                    if ($fixWrongAmounts && !$dryRun) {
                        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ AMENDED —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
                        $lastAmendedEvent = $activeEvents
                            ->where('event_type', 'amended')
                            ->whereNotNull('specification_id')
                            ->last();

                        if ($lastAmendedEvent) {
                            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–µ–ª—å—Ç—É
                            $eventsBefore = $activeEvents
                                ->filter(function ($e) use ($lastAmendedEvent) {
                                    return $e->id < $lastAmendedEvent->id && 
                                           !in_array($e->event_type->value, ['payment_created']);
                                })
                                ->sum('amount_delta');

                            $correctDelta = $contractAmount - $eventsBefore;

                            if (abs($lastAmendedEvent->amount_delta - $correctDelta) > 0.01) {
                                $this->line("   –ò—Å–ø—Ä–∞–≤–ª—è—é —Å–æ–±—ã—Ç–∏–µ id:{$lastAmendedEvent->id}");
                                $this->line("   –°—Ç–∞—Ä–∞—è –¥–µ–ª—å—Ç–∞: {$lastAmendedEvent->amount_delta}");
                                $this->line("   –ù–æ–≤–∞—è –¥–µ–ª—å—Ç–∞: {$correctDelta}");

                                DB::table('contract_state_events')
                                    ->where('id', $lastAmendedEvent->id)
                                    ->update([
                                        'amount_delta' => $correctDelta,
                                        'metadata' => json_encode(array_merge(
                                            $lastAmendedEvent->metadata ?? [],
                                            [
                                                'old_amount' => $lastAmendedEvent->amount_delta,
                                                'new_amount' => $correctDelta,
                                                'fixed_by_command' => now()->toIso8601String(),
                                            ]
                                        )),
                                    ]);

                                $stats['events_fixed']++;
                            }
                        }
                    } elseif ($fixWrongAmounts) {
                        $this->line("   [DRY-RUN] –ë—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ id:{$lastAmendedEvent->id ?? 'N/A'}");
                        $stats['events_fixed']++;
                    }

                    $stats['events_checked']++;
                }

            } catch (\Exception $e) {
                $stats['errors'][] = "–ö–æ–Ω—Ç—Ä–∞–∫—Ç #{$contract->id}: {$e->getMessage()}";
                Log::error('Fix history events error', [
                    'contract_id' => $contract->id,
                    'error' => $e->getMessage(),
                    'trace' => $e->getTraceAsString(),
                ]);
            }
        }

        $this->newLine(2);
        $this->info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        $this->table(
            ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            [
                ['–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤', $stats['contracts_processed']],
                ['–ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π', $stats['events_checked']],
                ['–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π', $stats['events_fixed']],
                ['–û—à–∏–±–æ–∫', count($stats['errors'])],
            ]
        );

        if (!empty($stats['errors'])) {
            $this->error('‚ùå –û—à–∏–±–∫–∏:');
            foreach ($stats['errors'] as $error) {
                $this->error("  - {$error}");
            }
        }

        if ($dryRun) {
            $this->warn('‚ö†Ô∏è  –≠—Ç–æ –±—ã–ª —Ä–µ–∂–∏–º DRY-RUN. –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ —Ñ–ª–∞–≥–∞ --dry-run');
        }

        return self::SUCCESS;
    }
}

