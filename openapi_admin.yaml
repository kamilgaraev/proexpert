openapi: 3.0.3
info:
  title: ProHelper Admin API
  description: API для администрирования системы ProHelper. Обеспечивает интерфейс для управления пользователями, проектами, справочниками и генерации отчетов.
  version: 1.0.0
servers:
  - url: /api/v1/admin
    description: Основной сервер API администрирования
tags:
  - name: Аутентификация 
    description: Управление аутентификацией администраторов
  - name: Управление пользователями
    description: Операции управления пользователями (прорабами)
  - name: Управление проектами
    description: Операции управления проектами и назначением прорабов
  - name: Справочники материалов
    description: Управление справочниками материалов
  - name: Справочники видов работ
    description: Управление справочниками видов работ
  - name: Справочники поставщиков
    description: Управление справочниками поставщиков
  - name: Просмотр логов
    description: Просмотр журналов операций
  - name: Отчеты
    description: Формирование и экспорт отчетов
paths:
  # ========== Auth Routes (auth.php) ==========
  /auth/login:
    post:
      tags:
        - Аутентификация
      summary: Авторизация администратора
      description: Выполняет аутентификацию администратора и возвращает JWT токен
      operationId: adminLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "admin@example.com"
                  description: Email администратора
                password:
                  type: string
                  format: password
                  example: "password123"
                  description: Пароль администратора
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Авторизация успешна"
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                      user:
                        $ref: '#/components/schemas/AdminUser'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '403':
          description: Нет доступа к панели администрирования
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /auth/logout:
    post:
      tags:
        - Аутентификация
      summary: Выход из системы
      description: Инвалидирует текущий JWT токен
      operationId: adminLogout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешный выход из системы
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Выход выполнен успешно"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/me:
    get:
      tags:
        - Аутентификация
      summary: Данные текущего администратора
      description: Возвращает информацию о текущем авторизованном администраторе
      operationId: adminMe
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Данные пользователя
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/AdminUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /auth/refresh:
    post:
      tags:
        - Аутентификация
      summary: Обновление токена
      description: Обновляет JWT токен при наличии действительного токена
      operationId: adminRefreshToken
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Токен успешно обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Токен успешно обновлен"
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ========== User Management Routes (users.php) ==========
  /users:
    get:
      tags:
        - Управление пользователями
      summary: Список прорабов
      description: Возвращает список прорабов с пагинацией
      operationId: getUsersList
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/PageParam'
        - in: query
          name: name
          schema:
            type: string
          description: Фильтрация по имени прораба
        - in: query
          name: is_active
          schema:
            type: boolean
          description: Фильтрация по статусу активности
      responses:
        '200':
          description: Список прорабов
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ForemanUser'
                  links:
                    $ref: '#/components/schemas/PaginationLinks'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Управление пользователями
      summary: Создание прораба
      description: Создает нового прораба в текущей организации
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreForemanRequest'
      responses:
        '201':
          description: Прораб успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForemanUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{user}:
    get:
      tags:
        - Управление пользователями
      summary: Детали прораба
      description: Возвращает детальную информацию о прорабе
      operationId: getUserDetails
      security:
        - bearerAuth: []
      parameters:
        - name: user
          in: path
          required: true
          description: ID прораба
          schema:
            type: integer
      responses:
        '200':
          description: Данные прораба
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForemanUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Управление пользователями
      summary: Обновление прораба
      description: Обновляет данные прораба
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: user
          in: path
          required: true
          description: ID прораба
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateForemanRequest'
      responses:
        '200':
          description: Данные прораба успешно обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForemanUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{user}/block:
    post:
      tags:
        - Управление пользователями
      summary: Блокировка прораба
      description: Блокирует прораба (изменяет статус is_active на false)
      operationId: blockUser
      security:
        - bearerAuth: []
      parameters:
        - name: user
          in: path
          required: true
          description: ID прораба
          schema:
            type: integer
      responses:
        '200':
          description: Прораб успешно заблокирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Foreman blocked successfully."
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{user}/unblock:
    post:
      tags:
        - Управление пользователями
      summary: Разблокировка прораба
      description: Разблокирует прораба (изменяет статус is_active на true)
      operationId: unblockUser
      security:
        - bearerAuth: []
      parameters:
        - name: user
          in: path
          required: true
          description: ID прораба
          schema:
            type: integer
      responses:
        '200':
          description: Прораб успешно разблокирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Foreman unblocked successfully."
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ========== Project Management Routes (projects.php) ==========
  /projects:
    get:
      tags:
        - Управление проектами
      summary: Список проектов
      description: Возвращает список проектов с пагинацией
      operationId: getProjectsList
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/PageParam'
        - in: query
          name: name
          schema:
            type: string
          description: Фильтрация по названию проекта
        - in: query
          name: status
          schema:
            type: string
            enum: [planned, active, completed, suspended]
          description: Фильтрация по статусу проекта
        - in: query
          name: is_archived
          schema:
            type: boolean
          description: Фильтрация по архивному статусу
      responses:
        '200':
          description: Список проектов
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  links:
                    $ref: '#/components/schemas/PaginationLinks'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Управление проектами
      summary: Создание проекта
      description: Создает новый проект в текущей организации
      operationId: createProject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreProjectRequest'
      responses:
        '201':
          description: Проект успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{project}:
    get:
      tags:
        - Управление проектами
      summary: Детали проекта
      description: Возвращает детальную информацию о проекте
      operationId: getProjectDetails
      security:
        - bearerAuth: []
      parameters:
        - name: project
          in: path
          required: true
          description: ID проекта
          schema:
            type: integer
      responses:
        '200':
          description: Данные проекта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Управление проектами
      summary: Обновление проекта
      description: Обновляет данные проекта
      operationId: updateProject
      security:
        - bearerAuth: []
      parameters:
        - name: project
          in: path
          required: true
          description: ID проекта
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Данные проекта успешно обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    delete:
      tags:
        - Управление проектами
      summary: Удаление проекта
      description: Удаляет проект (soft delete)
      operationId: deleteProject
      security:
        - bearerAuth: []
      parameters:
        - name: project
          in: path
          required: true
          description: ID проекта
          schema:
            type: integer
      responses:
        '204':
          description: Проект успешно удален
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{project}/foremen/{user}:
    post:
      tags:
        - Управление проектами
      summary: Назначить прораба на проект
      description: Назначает прораба на указанный проект
      operationId: assignForeman
      security:
        - bearerAuth: []
      parameters:
        - name: project
          in: path
          required: true
          description: ID проекта
          schema:
            type: integer
        - name: user
          in: path
          required: true
          description: ID прораба
          schema:
            type: integer
      responses:
        '200':
          description: Прораб успешно назначен на проект
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Прораб успешно назначен на проект"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Конфликт (прораб уже назначен на проект)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    delete:
      tags:
        - Управление проектами
      summary: Открепить прораба от проекта
      description: Отменяет назначение прораба на указанный проект
      operationId: detachForeman
      security:
        - bearerAuth: []
      parameters:
        - name: project
          in: path
          required: true
          description: ID проекта
          schema:
            type: integer
        - name: user
          in: path
          required: true
          description: ID прораба
          schema:
            type: integer
      responses:
        '200':
          description: Прораб успешно откреплен от проекта
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Прораб успешно откреплен от проекта"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ========== Catalog Management Routes (catalogs.php) ==========
  # --- Materials ---
  /materials:
    get:
      tags:
        - Справочники материалов
      summary: Список материалов
      description: Возвращает список материалов с пагинацией
      operationId: getMaterialsList
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/PageParam'
        - in: query
          name: name
          schema:
            type: string
          description: Фильтрация по названию материала
        - in: query
          name: category
          schema:
            type: string
          description: Фильтрация по категории материала
        - in: query
          name: is_active
          schema:
            type: boolean
          description: Фильтрация по статусу активности
      responses:
        '200':
          description: Список материалов
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Material'
                  links:
                    $ref: '#/components/schemas/PaginationLinks'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Справочники материалов
      summary: Создание материала
      description: Создает новый материал в справочнике текущей организации
      operationId: createMaterial
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreMaterialRequest'
      responses:
        '201':
          description: Материал успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /materials/{material}:
    get:
      tags:
        - Справочники материалов
      summary: Детали материала
      description: Возвращает детальную информацию о материале
      operationId: getMaterialDetails
      security:
        - bearerAuth: []
      parameters:
        - name: material
          in: path
          required: true
          description: ID материала
          schema:
            type: integer
      responses:
        '200':
          description: Данные материала
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Справочники материалов
      summary: Обновление материала
      description: Обновляет данные материала
      operationId: updateMaterial
      security:
        - bearerAuth: []
      parameters:
        - name: material
          in: path
          required: true
          description: ID материала
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMaterialRequest'
      responses:
        '200':
          description: Данные материала успешно обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Справочники материалов
      summary: Удаление материала
      description: Удаляет материал (soft delete)
      operationId: deleteMaterial
      security:
        - bearerAuth: []
      parameters:
        - name: material
          in: path
          required: true
          description: ID материала
          schema:
            type: integer
      responses:
        '204':
          description: Материал успешно удален
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # --- Work Types ---
  /work-types:
    get:
      tags:
        - Справочники видов работ
      summary: Список видов работ
      description: Возвращает список видов работ с пагинацией
      operationId: getWorkTypesList
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/PageParam'
        - in: query
          name: name
          schema:
            type: string
          description: Фильтрация по названию вида работ
        - in: query
          name: category
          schema:
            type: string
          description: Фильтрация по категории работ
        - in: query
          name: is_active
          schema:
            type: boolean
          description: Фильтрация по статусу активности
      responses:
        '200':
          description: Список видов работ
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkType'
                  links:
                    $ref: '#/components/schemas/PaginationLinks'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Справочники видов работ
      summary: Создание вида работ
      description: Создает новый вид работ в справочнике текущей организации
      operationId: createWorkType
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreWorkTypeRequest'
      responses:
        '201':
          description: Вид работ успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkType'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /work-types/{work_type}:
    get:
      tags:
        - Справочники видов работ
      summary: Детали вида работ
      description: Возвращает детальную информацию о виде работ
      operationId: getWorkTypeDetails
      security:
        - bearerAuth: []
      parameters:
        - name: work_type
          in: path
          required: true
          description: ID вида работ
          schema:
            type: integer
      responses:
        '200':
          description: Данные вида работ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkType'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Справочники видов работ
      summary: Обновление вида работ
      description: Обновляет данные вида работ
      operationId: updateWorkType
      security:
        - bearerAuth: []
      parameters:
        - name: work_type
          in: path
          required: true
          description: ID вида работ
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkTypeRequest'
      responses:
        '200':
          description: Данные вида работ успешно обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkType'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Справочники видов работ
      summary: Удаление вида работ
      description: Удаляет вид работ (soft delete)
      operationId: deleteWorkType
      security:
        - bearerAuth: []
      parameters:
        - name: work_type
          in: path
          required: true
          description: ID вида работ
          schema:
            type: integer
      responses:
        '204':
          description: Вид работ успешно удален
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # --- Suppliers ---
  /suppliers:
    get:
      tags:
        - Справочники поставщиков
      summary: Список поставщиков
      description: Возвращает список поставщиков с пагинацией
      operationId: getSuppliersList
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/PageParam'
        - in: query
          name: name
          schema:
            type: string
          description: Фильтрация по названию поставщика
        - in: query
          name: is_active
          schema:
            type: boolean
          description: Фильтрация по статусу активности
      responses:
        '200':
          description: Список поставщиков
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Supplier'
                  links:
                    $ref: '#/components/schemas/PaginationLinks'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Справочники поставщиков
      summary: Создание поставщика
      description: Создает нового поставщика в справочнике текущей организации
      operationId: createSupplier
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreSupplierRequest'
      responses:
        '201':
          description: Поставщик успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /suppliers/{supplier}:
    get:
      tags:
        - Справочники поставщиков
      summary: Детали поставщика
      description: Возвращает детальную информацию о поставщике
      operationId: getSupplierDetails
      security:
        - bearerAuth: []
      parameters:
        - name: supplier
          in: path
          required: true
          description: ID поставщика
          schema:
            type: integer
      responses:
        '200':
          description: Данные поставщика
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Справочники поставщиков
      summary: Обновление поставщика
      description: Обновляет данные поставщика
      operationId: updateSupplier
      security:
        - bearerAuth: []
      parameters:
        - name: supplier
          in: path
          required: true
          description: ID поставщика
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSupplierRequest'
      responses:
        '200':
          description: Данные поставщика успешно обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Справочники поставщиков
      summary: Удаление поставщика
      description: Удаляет поставщика (soft delete)
      operationId: deleteSupplier
      security:
        - bearerAuth: []
      parameters:
        - name: supplier
          in: path
          required: true
          description: ID поставщика
          schema:
            type: integer
      responses:
        '204':
          description: Поставщик успешно удален
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # --- Categories (Assuming generic or specific controllers/routes exist) ---
  # Example: /material-categories, /work-type-categories
  # Add Category CRUD operations here if they exist...

  # ========== Log Viewing Routes (logs.php) ==========
  /logs/material-usage:
    get:
      tags:
        - Просмотр логов
      summary: Логи операций с материалами
      description: Возвращает список логов операций с материалами (приемки, списания) с пагинацией
      operationId: getMaterialLogs
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/PageParam'
        - in: query
          name: project_id
          schema:
            type: integer
          description: Фильтрация по ID проекта
        - in: query
          name: material_id
          schema:
            type: integer
          description: Фильтрация по ID материала
        - in: query
          name: user_id
          schema:
            type: integer
          description: Фильтрация по ID пользователя
        - in: query
          name: date_from
          schema:
            type: string
            format: date
            example: "2024-01-01"
          description: Фильтрация по начальной дате
        - in: query
          name: date_to
          schema:
            type: string
            format: date
            example: "2024-01-31"
          description: Фильтрация по конечной дате
        - in: query
          name: operation_type
          schema:
            type: string
            enum: [receipt, write_off]
          description: Фильтрация по типу операции
      responses:
        '200':
          description: Список логов операций с материалами
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MaterialUsageLog'
                  links:
                    $ref: '#/components/schemas/PaginationLinks'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /logs/work-completion:
    get:
      tags:
        - Просмотр логов
      summary: Логи выполненных работ
      description: Возвращает список логов выполненных работ с пагинацией
      operationId: getWorkLogs
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/PageParam'
        - in: query
          name: project_id
          schema:
            type: integer
          description: Фильтрация по ID проекта
        - in: query
          name: work_type_id
          schema:
            type: integer
          description: Фильтрация по ID вида работ
        - in: query
          name: user_id
          schema:
            type: integer
          description: Фильтрация по ID пользователя
        - in: query
          name: date_from
          schema:
            type: string
            format: date
            example: "2024-01-01"
          description: Фильтрация по начальной дате
        - in: query
          name: date_to
          schema:
            type: string
            format: date
            example: "2024-01-31"
          description: Фильтрация по конечной дате
      responses:
        '200':
          description: Список логов выполненных работ
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkCompletionLog'
                  links:
                    $ref: '#/components/schemas/PaginationLinks'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ========== Report Generation Routes (reports.php) ==========
  /reports/project-summary/{project}:
    get:
      tags:
        - Отчеты
      summary: Generate Project Summary Report
      description: Generates a summary report for a specific project (e.g., material usage, work progress).
      operationId: adminGenerateProjectSummaryReport
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
        - $ref: '#/components/parameters/FilterDateFromParam'
        - $ref: '#/components/parameters/FilterDateToParam'
      responses:
        '200':
          description: Project summary report data
          content:
            application/json:
              schema:
                # Define schema for the report structure
                type: object
                example:
                  projectId: 1
                  projectName: "Building A"
                  period: "2024-07-01 - 2024-07-31"
                  totalMaterialsCost: 5250.75 # Example data
                  totalWorkHours: 320 # Example data
                  # Add more detailed report fields
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden' # Requires 'view-reports' permission
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reports/foreman-activity/{user}:
    get:
      tags:
        - Отчеты
      summary: Generate Foreman Activity Report
      description: Generates an activity report for a specific foreman.
      operationId: adminGenerateForemanActivityReport
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
        - $ref: '#/components/parameters/FilterDateFromParam'
        - $ref: '#/components/parameters/FilterDateToParam'
      responses:
        '200':
          description: Foreman activity report data
          content:
            application/json:
              schema:
                 # Define schema for the report structure
                type: object
                example:
                   foremanId: 8
                   foremanName: "User One"
                   period: "2024-07-01 - 2024-07-31"
                   projectsWorkedOn: [1, 3]
                   materialLogsCount: 15
                   workLogsCount: 22
                   # Add more detailed report fields
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden' # Requires 'view-reports' permission
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reports/material-usage:
    get:
      tags:
        - Отчеты
      summary: Отчет по движению материалов
      description: Формирует отчет по движению материалов за период с возможностью экспорта в CSV/Excel
      operationId: materialUsageReport
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: project_id
          schema:
            type: integer
          description: Фильтрация по ID проекта
        - in: query
          name: material_id
          schema:
            type: integer
          description: Фильтрация по ID материала
        - in: query
          name: date_from
          schema:
            type: string
            format: date
            example: "2024-01-01"
          description: Начальная дата отчетного периода
          required: true
        - in: query
          name: date_to
          schema:
            type: string
            format: date
            example: "2024-01-31"
          description: Конечная дата отчетного периода
          required: true
        - in: query
          name: format
          schema:
            type: string
            enum: [json, csv, xlsx]
            default: json
          description: Формат экспорта отчета
      responses:
        '200':
          description: Отчет по движению материалов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaterialUsageReport'
            text/csv:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reports/work-completion:
    get:
      tags:
        - Отчеты
      summary: Отчет по выполненным работам
      description: Формирует отчет по выполненным работам за период с возможностью экспорта в CSV/Excel
      operationId: workCompletionReport
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: project_id
          schema:
            type: integer
          description: Фильтрация по ID проекта
        - in: query
          name: work_type_id
          schema:
            type: integer
          description: Фильтрация по ID вида работ
        - in: query
          name: date_from
          schema:
            type: string
            format: date
            example: "2024-01-01"
          description: Начальная дата отчетного периода
          required: true
        - in: query
          name: date_to
          schema:
            type: string
            format: date
            example: "2024-01-31"
          description: Конечная дата отчетного периода
          required: true
        - in: query
          name: format
          schema:
            type: string
            enum: [json, csv, xlsx]
            default: json
          description: Формат экспорта отчета
      responses:
        '200':
          description: Отчет по выполненным работам
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkCompletionReport'
            text/csv:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reports/foreman-activity:
    get:
      tags:
        - Отчеты
      summary: Отчет по активности прорабов
      description: Формирует отчет по активности прорабов за период
      operationId: foremanActivityReport
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: user_id
          schema:
            type: integer
          description: Фильтрация по ID прораба
        - in: query
          name: project_id
          schema:
            type: integer
          description: Фильтрация по ID проекта
        - in: query
          name: date_from
          schema:
            type: string
            format: date
            example: "2024-01-01"
          description: Начальная дата отчетного периода
          required: true
        - in: query
          name: date_to
          schema:
            type: string
            format: date
            example: "2024-01-31"
          description: Конечная дата отчетного периода
          required: true
        - in: query
          name: format
          schema:
            type: string
            enum: [json, csv, xlsx]
            default: json
          description: Формат экспорта отчета
      responses:
        '200':
          description: Отчет по активности прорабов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForemanActivityReport'
            text/csv:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reports/project-status-summary:
    get:
      tags:
        - Отчеты
      summary: Сводный отчет по проектам
      description: Формирует сводный отчет по статусам проектов
      operationId: projectStatusSummaryReport
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [planned, active, completed, suspended]
          description: Фильтрация по статусу проектов
        - in: query
          name: is_archived
          schema:
            type: boolean
          description: Включать архивные проекты
        - in: query
          name: format
          schema:
            type: string
            enum: [json, csv, xlsx]
            default: json
          description: Формат экспорта отчета
      responses:
        '200':
          description: Сводный отчет по проектам
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStatusSummaryReport'
            text/csv:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

# ================= Component Definitions =================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT токен, полученный через /auth/login"

  # ========== Reusable Parameters ==========
  parameters:
    PerPageParam:
      in: query
      name: per_page
      schema:
        type: integer
        default: 15
        minimum: 1
        maximum: 100
      description: Количество записей на странице
    PageParam:
      in: query
      name: page
      schema:
        type: integer
        default: 1
        minimum: 1
      description: Номер страницы
    FilterNameParam:
      in: query
      name: name
      schema:
        type: string
      description: Filter by name (partial match).
    FilterIsActiveParam:
      in: query
      name: is_active
      schema:
        type: boolean
      description: Filter by active status.
    FilterCategoryIdParam:
      in: query
      name: category_id
      schema:
        type: integer
      description: Filter by category ID.
    UserIdParam:
      name: user
      in: path
      required: true
      description: ID of the User (Foreman)
      schema:
        type: integer
        example: 8
    ProjectIdParam:
      name: project
      in: path
      required: true
      description: ID of the Project
      schema:
        type: integer
        example: 1
    MaterialIdParam:
      name: material
      in: path
      required: true
      description: ID of the Material
      schema:
        type: integer
        example: 101
    WorkTypeIdParam:
      name: work_type
      in: path
      required: true
      description: ID of the Work Type
      schema:
        type: integer
        example: 201
    SupplierIdParam:
      name: supplier
      in: path
      required: true
      description: ID of the Supplier
      schema:
        type: integer
        example: 301
    FilterProjectIdParam:
      in: query
      name: project_id
      schema:
        type: integer
      description: Filter logs/reports by Project ID.
    FilterUserIdParam:
      in: query
      name: user_id
      schema:
        type: integer
      description: Filter logs/reports by User (Foreman) ID.
    FilterMaterialIdParam:
      in: query
      name: material_id
      schema:
        type: integer
      description: Filter logs by Material ID.
    FilterWorkTypeIdParam:
      in: query
      name: work_type_id
      schema:
        type: integer
      description: Filter logs by Work Type ID.
    FilterDateFromParam:
      in: query
      name: date_from
      schema:
        type: string
        format: date
        example: "2024-07-01"
      description: Start date for filtering logs/reports.
    FilterDateToParam:
      in: query
      name: date_to
      schema:
        type: string
        format: date
        example: "2024-07-31"
      description: End date for filtering logs/reports.

  # ========== Reusable Responses ==========
  responses:
    Unauthorized:
      description: Ошибка авторизации
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error401'
    Forbidden:
      description: Доступ запрещен
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error403'
    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error404'
    ValidationError:
      description: Ошибка валидации
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error422'
    InternalServerError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error500'
    Conflict:
       description: Conflict (e.g., resource already exists or state prevents action)
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/Error409'

  # ========== Schemas (Requests, Responses, Models) ==========
  schemas:
    # Общие схемы
    PaginationLinks:
      type: object
      properties:
        first:
          type: string
          nullable: true
          example: "https://example.com/api/v1/admin/users?page=1"
        last:
          type: string
          nullable: true
          example: "https://example.com/api/v1/admin/users?page=5"
        prev:
          type: string
          nullable: true
          example: null
        next:
          type: string
          nullable: true
          example: "https://example.com/api/v1/admin/users?page=2"

    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        from:
          type: integer
          example: 1
        last_page:
          type: integer
          example: 5
        links:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                nullable: true
              label:
                type: string
              active:
                type: boolean
        path:
          type: string
          example: "https://example.com/api/v1/admin/users"
        per_page:
          type: integer
          example: 15
        to:
          type: integer
          example: 15
        total:
          type: integer
          example: 75

    # Схемы ошибок
    Error401:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Unauthorized"
    
    Error403:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Forbidden"
    
    Error404:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Resource not found"
    
    Error409:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Conflict"
    
    Error422:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "The given data was invalid"
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email: ["The email field is required."]
            password: ["The password field is required."]
    
    Error500:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Server Error"

    # Схемы пользователей
    AdminUser:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Администратор"
        email:
          type: string
          format: email
          example: "admin@example.com"
        current_organization_id:
          type: integer
          nullable: true
          example: 1
        roles:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: "Администратор"
              slug:
                type: string
                example: "admin"
              description:
                type: string
                example: "Администратор системы"
        created_at:
          type: string
          format: date-time
          example: "2024-01-01 00:00:00"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01 00:00:00"

    ForemanUser:
      type: object
      properties:
        id:
          type: integer
          example: 8
        name:
          type: string
          example: "Иванов Иван"
        email:
          type: string
          format: email
          example: "ivan@example.com"
        phone:
          type: string
          nullable: true
          example: "+7 (901) 123-45-67"
        position:
          type: string
          nullable: true
          example: "Старший прораб"
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2024-01-01 00:00:00"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01 00:00:00"

    StoreForemanRequest:
      type: object
      required:
        - name
        - email
        - password
        - password_confirmation
      properties:
        name:
          type: string
          example: "Петров Петр"
        email:
          type: string
          format: email
          example: "petr@example.com"
        password:
          type: string
          format: password
          example: "password123"
        password_confirmation:
          type: string
          format: password
          example: "password123"
        phone:
          type: string
          example: "+7 (901) 123-45-67"
        position:
          type: string
          example: "Младший прораб"

    UpdateForemanRequest:
      type: object
      properties:
        name:
          type: string
          example: "Петров Петр Иванович"
        email:
          type: string
          format: email
          example: "petr.i@example.com"
        password:
          type: string
          format: password
          example: "newpassword123"
        password_confirmation:
          type: string
          format: password
          example: "newpassword123"
        phone:
          type: string
          example: "+7 (901) 765-43-21"
        position:
          type: string
          example: "Старший прораб"

    # Схемы проектов
    Project:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Строительство жилого дома"
        address:
          type: string
          example: "г. Москва, ул. Примерная, 123"
        description:
          type: string
          nullable: true
          example: "16-этажный жилой дом с подземной парковкой"
        start_date:
          type: string
          format: date
          nullable: true
          example: "2024-01-15"
        end_date:
          type: string
          format: date
          nullable: true
          example: "2025-12-31"
        status:
          type: string
          enum: [planned, active, completed, suspended]
          example: "active"
        is_archived:
          type: boolean
          example: false
        organization_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-01-01 00:00:00"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01 00:00:00"

    StoreProjectRequest:
      type: object
      required:
        - name
        - address
      properties:
        name:
          type: string
          example: "Строительство офисного центра"
        address:
          type: string
          example: "г. Санкт-Петербург, пр. Невский, 1"
        description:
          type: string
          example: "Офисный центр класса А"
        start_date:
          type: string
          format: date
          example: "2024-03-01"
        end_date:
          type: string
          format: date
          example: "2025-09-30"
        status:
          type: string
          enum: [planned, active, completed, suspended]
          default: planned
          example: "planned"

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          example: "Строительство офисного центра Prime"
        address:
          type: string
          example: "г. Санкт-Петербург, пр. Невский, 1-3"
        description:
          type: string
          example: "Офисный центр класса А с подземной парковкой"
        start_date:
          type: string
          format: date
          example: "2024-04-01"
        end_date:
          type: string
          format: date
          example: "2025-12-31"
        status:
          type: string
          enum: [planned, active, completed, suspended]
          example: "active"
        is_archived:
          type: boolean
          example: false

    # Схемы материалов
    Material:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Цемент М500"
        code:
          type: string
          nullable: true
          example: "CEM-500"
        measurement_unit:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "кг"
            code:
              type: string
              example: "kg"
        description:
          type: string
          nullable: true
          example: "Портландцемент ЦЕМ I 42,5Н"
        category:
          type: string
          nullable: true
          example: "Строительные смеси"
        default_price:
          type: number
          format: decimal
          nullable: true
          example: 350.50
        is_active:
          type: boolean
          example: true
        organization_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-01-01 00:00:00"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01 00:00:00"

    StoreMaterialRequest:
      type: object
      required:
        - name
        - measurement_unit_id
      properties:
        name:
          type: string
          example: "Песок строительный"
        code:
          type: string
          example: "SAND-01"
        measurement_unit_id:
          type: integer
          example: 2
        description:
          type: string
          example: "Песок строительный карьерный"
        category:
          type: string
          example: "Сыпучие материалы"
        default_price:
          type: number
          format: decimal
          example: 1200.00
        is_active:
          type: boolean
          default: true
          example: true

    UpdateMaterialRequest:
      type: object
      properties:
        name:
          type: string
          example: "Песок строительный мытый"
        code:
          type: string
          example: "SAND-01-W"
        measurement_unit_id:
          type: integer
          example: 2
        description:
          type: string
          example: "Песок строительный карьерный мытый"
        category:
          type: string
          example: "Сыпучие материалы"
        default_price:
          type: number
          format: decimal
          example: 1500.00
        is_active:
          type: boolean
          example: true

    # Схемы видов работ
    WorkType:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Штукатурка стен"
        measurement_unit:
          type: object
          properties:
            id:
              type: integer
              example: 3
            name:
              type: string
              example: "м²"
            code:
              type: string
              example: "m2"
        description:
          type: string
          nullable: true
          example: "Оштукатуривание вертикальных поверхностей"
        category:
          type: string
          nullable: true
          example: "Отделочные работы"
        default_price:
          type: number
          format: decimal
          nullable: true
          example: 800.00
        is_active:
          type: boolean
          example: true
        organization_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-01-01 00:00:00"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01 00:00:00"

    StoreWorkTypeRequest:
      type: object
      required:
        - name
        - measurement_unit_id
      properties:
        name:
          type: string
          example: "Бетонирование фундамента"
        measurement_unit_id:
          type: integer
          example: 4
        description:
          type: string
          example: "Заливка бетонного фундамента"
        category:
          type: string
          example: "Бетонные работы"
        default_price:
          type: number
          format: decimal
          example: 5000.00
        is_active:
          type: boolean
          default: true
          example: true

    UpdateWorkTypeRequest:
      type: object
      properties:
        name:
          type: string
          example: "Бетонирование монолитного фундамента"
        measurement_unit_id:
          type: integer
          example: 4
        description:
          type: string
          example: "Заливка монолитного бетонного фундамента"
        category:
          type: string
          example: "Бетонные работы"
        default_price:
          type: number
          format: decimal
          example: 5500.00
        is_active:
          type: boolean
          example: true

    # Схемы поставщиков
    Supplier:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "ООО Стройматериалы"
        contact_person:
          type: string
          nullable: true
          example: "Иванов Иван Иванович"
        phone:
          type: string
          nullable: true
          example: "+7 (495) 123-45-67"
        email:
          type: string
          format: email
          nullable: true
          example: "info@stroymaterials.ru"
        address:
          type: string
          nullable: true
          example: "г. Москва, ул. Поставщиков, 10"
        is_active:
          type: boolean
          example: true
        organization_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-01-01 00:00:00"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01 00:00:00"

    StoreSupplierRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "ИП Петров"
        contact_person:
          type: string
          example: "Петров Петр Петрович"
        phone:
          type: string
          example: "+7 (901) 765-43-21"
        email:
          type: string
          format: email
          example: "info@petrov.ru"
        address:
          type: string
          example: "г. Москва, ул. Строителей, 5"
        is_active:
          type: boolean
          default: true
          example: true

    UpdateSupplierRequest:
      type: object
      properties:
        name:
          type: string
          example: "ИП Петров П.П."
        contact_person:
          type: string
          example: "Петров Петр Петрович"
        phone:
          type: string
          example: "+7 (901) 765-43-21"
        email:
          type: string
          format: email
          example: "petrov@example.com"
        address:
          type: string
          example: "г. Москва, ул. Строителей, 5, офис 10"
        is_active:
          type: boolean
          example: true

    # Схемы логов
    MaterialUsageLog:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          enum: [receipt, write_off]
          example: "receipt"
        material:
          $ref: '#/components/schemas/Material'
        project:
          $ref: '#/components/schemas/Project'
        user:
          $ref: '#/components/schemas/ForemanUser'
        quantity:
          type: number
          format: decimal
          example: 500.0
        unit_price:
          type: number
          format: decimal
          nullable: true
          example: 350.50
        total_price:
          type: number
          format: decimal
          nullable: true
          example: 175250.00
        supplier:
          $ref: '#/components/schemas/Supplier'
        document_number:
          type: string
          nullable: true
          example: "ТТН-12345"
        comment:
          type: string
          nullable: true
          example: "Поставка цемента для фундамента"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15 10:30:00"

    WorkCompletionLog:
      type: object
      properties:
        id:
          type: integer
          example: 1
        work_type:
          $ref: '#/components/schemas/WorkType'
        project:
          $ref: '#/components/schemas/Project'
        user:
          $ref: '#/components/schemas/ForemanUser'
        quantity:
          type: number
          format: decimal
          example: 150.0
        unit_price:
          type: number
          format: decimal
          nullable: true
          example: 800.00
        total_price:
          type: number
          format: decimal
          nullable: true
          example: 120000.00
        completion_date:
          type: string
          format: date
          example: "2024-01-20"
        comment:
          type: string
          nullable: true
          example: "Штукатурка стен в подъезде №1"
        created_at:
          type: string
          format: date-time
          example: "2024-01-20 18:45:00"

    # Схемы отчетов
    MaterialUsageReport:
      type: object
      properties:
        period:
          type: object
          properties:
            from:
              type: string
              format: date
              example: "2024-01-01"
            to:
              type: string
              format: date
              example: "2024-01-31"
        project:
          $ref: '#/components/schemas/Project'
        summary:
          type: object
          properties:
            total_receipts:
              type: number
              format: decimal
              example: 1250000.00
            total_write_offs:
              type: number
              format: decimal
              example: 875000.00
            balance:
              type: number
              format: decimal
              example: 375000.00
        materials:
          type: array
          items:
            type: object
            properties:
              material:
                $ref: '#/components/schemas/Material'
              initial_balance:
                type: number
                format: decimal
                example: 200.0
              receipts:
                type: number
                format: decimal
                example: 1000.0
              write_offs:
                type: number
                format: decimal
                example: 800.0
              final_balance:
                type: number
                format: decimal
                example: 400.0
        detailed_operations:
          type: array
          items:
            $ref: '#/components/schemas/MaterialUsageLog'

    WorkCompletionReport:
      type: object
      properties:
        period:
          type: object
          properties:
            from:
              type: string
              format: date
              example: "2024-01-01"
            to:
              type: string
              format: date
              example: "2024-01-31"
        project:
          $ref: '#/components/schemas/Project'
        summary:
          type: object
          properties:
            total_works:
              type: integer
              example: 25
            total_volume:
              type: number
              format: decimal
              example: 2500.0
            total_amount:
              type: number
              format: decimal
              example: 2000000.00
        work_types:
          type: array
          items:
            type: object
            properties:
              work_type:
                $ref: '#/components/schemas/WorkType'
              total_volume:
                type: number
                format: decimal
                example: 500.0
              total_amount:
                type: number
                format: decimal
                example: 400000.00
        detailed_operations:
          type: array
          items:
            $ref: '#/components/schemas/WorkCompletionLog'

    ForemanActivityReport:
      type: object
      properties:
        period:
          type: object
          properties:
            from:
              type: string
              format: date
              example: "2024-01-01"
            to:
              type: string
              format: date
              example: "2024-01-31"
        foreman:
          $ref: '#/components/schemas/ForemanUser'
        summary:
          type: object
          properties:
            total_projects:
              type: integer
              example: 3
            material_operations:
              type: integer
              example: 45
            work_completions:
              type: integer
              example: 30
            total_material_amount:
              type: number
              format: decimal
              example: 1500000.00
            total_work_amount:
              type: number
              format: decimal
              example: 2200000.00
        projects:
          type: array
          items:
            type: object
            properties:
              project:
                $ref: '#/components/schemas/Project'
              material_operations:
                type: integer
                example: 15
              work_completions:
                type: integer
                example: 10
              material_amount:
                type: number
                format: decimal
                example: 500000.00
              work_amount:
                type: number
                format: decimal
                example: 800000.00

    ProjectStatusSummaryReport:
      type: object
      properties:
        total_projects:
          type: integer
          example: 15
        projects_by_status:
          type: object
          properties:
            planned:
              type: integer
              example: 3
            active:
              type: integer
              example: 8
            completed:
              type: integer
              example: 3
            suspended:
              type: integer
              example: 1
        archived_projects:
          type: integer
          example: 5
        projects:
          type: array
          items:
            type: object
            properties:
              project:
                $ref: '#/components/schemas/Project'
              foremen_count:
                type: integer
                example: 2
              materials_volume:
                type: number
                format: decimal
                example: 250000.00
              works_volume:
                type: number
                format: decimal
                example: 350000.00 